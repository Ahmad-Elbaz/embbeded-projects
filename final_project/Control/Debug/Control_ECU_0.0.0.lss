
Control_ECU_0.0.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00002d52  00002de6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  0080006e  0080006e  00002df4  2**0
                  ALLOC
  3 .stab         00003420  00000000  00000000  00002df4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017eb  00000000  00000000  00006214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000079ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000098f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a7e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b590  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b97d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c14b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 4e 13 	jmp	0x269c	; 0x269c <__vector_3>
      10:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__vector_6>
      1c:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__vector_7>
      20:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__vector_8>
      24:	0c 94 40 12 	jmp	0x2480	; 0x2480 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 05 	call	0xb98	; 0xb98 <main>
      8a:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_Init>:
 * Setup the direction of the required pin output.
 * Set initial value = 0
 */

void Buzzer_Init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID, PIN_OUTPUT);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 02 09 	call	0x1204	; 0x1204 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID, LOGIC_LOW); /*set initial value = 0*/
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_On>:
/*
 * Description :
 * Set pin value = 1
 */
void Buzzer_On()
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID, LOGIC_HIGH);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_Off>:
/*
 * Description :
 * Set pin value = 0
 */
void Buzzer_Off()
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID, LOGIC_LOW);
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>

}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <main>:
const UART_ConfigType UART_CONFIG = {Asynchronous,disabled,defult,_1bit,_8bit};

uint8 g_pass1[10] , g_pass2[10] , g_savedPass[10], g_wrongPassCount =0;


int main(void){
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	UART_init(&UART_CONFIG);
     ba0:	88 e6       	ldi	r24, 0x68	; 104
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 e7 14 	call	0x29ce	; 0x29ce <UART_init>
	LCD_init();
     ba8:	0e 94 40 0c 	call	0x1880	; 0x1880 <LCD_init>
	Buzzer_Init();
     bac:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_Init>
	DcMotor_Init();
     bb0:	0e 94 04 08 	call	0x1008	; 0x1008 <DcMotor_Init>

	GPIO_setupPinDirection(PORTA_ID,PIN0_ID,PIN_OUTPUT);
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	0e 94 02 09 	call	0x1204	; 0x1204 <GPIO_setupPinDirection>


	firstTimeMenu();
     bbe:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <firstTimeMenu>
while(1)
	{
		mainMenu();
     bc2:	0e 94 64 06 	call	0xcc8	; 0xcc8 <mainMenu>
     bc6:	fd cf       	rjmp	.-6      	; 0xbc2 <main+0x2a>

00000bc8 <firstTimeMenu>:
	}
	return 0;
}
/*display the first time settings when the user use the program for the first time*/
void firstTimeMenu(void){
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	0f 92       	push	r0
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
	do
	{
		/*-ask HMI to display "Enter new pass
		 *-receive the pass
		 *-send the pass back*/
		sendByte(ENTER_NEW_PASS);
     bd2:	8e e6       	ldi	r24, 0x6E	; 110
     bd4:	0e 94 30 06 	call	0xc60	; 0xc60 <sendByte>
		/*receive first pass from the user*/
		receiveString(g_pass1);
     bd8:	81 e8       	ldi	r24, 0x81	; 129
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 51 06 	call	0xca2	; 0xca2 <receiveString>
		/*
		 * ask HMI to confirm the pass again
		 * and send the confirmed pass back
		 */
		sendByte(CONFIRM_PASS);
     be0:	83 e6       	ldi	r24, 0x63	; 99
     be2:	0e 94 30 06 	call	0xc60	; 0xc60 <sendByte>
		/*receive second pass from the user*/
		receiveString(g_pass2);
     be6:	8b e8       	ldi	r24, 0x8B	; 139
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 51 06 	call	0xca2	; 0xca2 <receiveString>
		/*if the two pass do not match display pass not match*/
		if(strcmp(g_pass1,g_pass2)){sendByte(NO_MATCH);}
     bee:	81 e8       	ldi	r24, 0x81	; 129
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	2b e8       	ldi	r18, 0x8B	; 139
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	b9 01       	movw	r22, r18
     bf8:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <strcmp>
     bfc:	00 97       	sbiw	r24, 0x00	; 0
     bfe:	19 f0       	breq	.+6      	; 0xc06 <firstTimeMenu+0x3e>
     c00:	8f e6       	ldi	r24, 0x6F	; 111
     c02:	0e 94 30 06 	call	0xc60	; 0xc60 <sendByte>

	}while(strcmp(g_pass1,g_pass2));
     c06:	81 e8       	ldi	r24, 0x81	; 129
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	2b e8       	ldi	r18, 0x8B	; 139
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	b9 01       	movw	r22, r18
     c10:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <strcmp>
     c14:	00 97       	sbiw	r24, 0x00	; 0
     c16:	e9 f6       	brne	.-70     	; 0xbd2 <firstTimeMenu+0xa>
	/*ask the HMI to display pass saved*/
	sendByte(PASS_SAVED);
     c18:	83 e7       	ldi	r24, 0x73	; 115
     c1a:	0e 94 30 06 	call	0xc60	; 0xc60 <sendByte>
	strcpy(g_savedPass,g_pass2);
     c1e:	87 e7       	ldi	r24, 0x77	; 119
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	2b e8       	ldi	r18, 0x8B	; 139
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	b9 01       	movw	r22, r18
     c28:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <strcpy>


	/*clear the pass in g_pass1 & g_pass2
	 * so when i use them again they don't contain the correct pass*/
	for(uint8 i=0;i<20;i++)
     c2c:	19 82       	std	Y+1, r1	; 0x01
     c2e:	11 c0       	rjmp	.+34     	; 0xc52 <firstTimeMenu+0x8a>
	{
		g_pass1[i]=0;
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	88 2f       	mov	r24, r24
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	fc 01       	movw	r30, r24
     c38:	ef 57       	subi	r30, 0x7F	; 127
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	10 82       	st	Z, r1
		g_pass2[i]=0;
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	fc 01       	movw	r30, r24
     c46:	e5 57       	subi	r30, 0x75	; 117
     c48:	ff 4f       	sbci	r31, 0xFF	; 255
     c4a:	10 82       	st	Z, r1
	strcpy(g_savedPass,g_pass2);


	/*clear the pass in g_pass1 & g_pass2
	 * so when i use them again they don't contain the correct pass*/
	for(uint8 i=0;i<20;i++)
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	8f 5f       	subi	r24, 0xFF	; 255
     c50:	89 83       	std	Y+1, r24	; 0x01
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	84 31       	cpi	r24, 0x14	; 20
     c56:	60 f3       	brcs	.-40     	; 0xc30 <firstTimeMenu+0x68>
	{
		g_pass1[i]=0;
		g_pass2[i]=0;
	}

}
     c58:	0f 90       	pop	r0
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	08 95       	ret

00000c60 <sendByte>:

/*
 * wait until the HMI_ECU to be ready to send the byte
 * and send data to the HMI_ECU
 */
void sendByte(uint8 a_data){
     c60:	df 93       	push	r29
     c62:	cf 93       	push	r28
     c64:	0f 92       	push	r0
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	89 83       	std	Y+1, r24	; 0x01
	/* Wait until HMI is ready to receive the byte */
	while(UART_recieveByte() != HMI_READY) {}
     c6c:	0e 94 7e 15 	call	0x2afc	; 0x2afc <UART_recieveByte>
     c70:	80 31       	cpi	r24, 0x10	; 16
     c72:	e1 f7       	brne	.-8      	; 0xc6c <sendByte+0xc>

	/* Send the required byte to HMI through UART */
	UART_sendByte(a_data);
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>
}
     c7a:	0f 90       	pop	r0
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <receiveByte>:
/* - function to tell the HMI_ECU i'm ready
 * - receive byte from HMI_ECU*/
uint8 receiveByte(void){
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	0f 92       	push	r0
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
	uint8 recieveData;
	/* Send CONTROL_READY byte to HMI to ask it to send the data */
	UART_sendByte(CONTROL_READY);
     c8c:	81 e1       	ldi	r24, 0x11	; 17
     c8e:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>

	/* Receive byte from HMI_ECU through UART */
	recieveData = UART_recieveByte();
     c92:	0e 94 7e 15 	call	0x2afc	; 0x2afc <UART_recieveByte>
     c96:	89 83       	std	Y+1, r24	; 0x01
	return recieveData;
     c98:	89 81       	ldd	r24, Y+1	; 0x01
}
     c9a:	0f 90       	pop	r0
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <receiveString>:

void receiveString(uint8 * a_string){
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <receiveString+0x6>
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01
	/* Send Control_READY byte to HMI_ECU to ask it to send the string */
	UART_sendByte(CONTROL_READY);
     cb0:	81 e1       	ldi	r24, 0x11	; 17
     cb2:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>

	/* Receive String from MC1 through UART */
	UART_receiveString(a_string);
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_receiveString>
}
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <mainMenu>:

/*==========================================================================*/
void mainMenu(void){
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	00 d0       	rcall	.+0      	; 0xcce <mainMenu+0x6>
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <mainMenu+0x8>
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * ask the HMI to display the main menu ( (+) open door (-) change pass)
	 * and send '+' or '-' back
	 */

	sendByte(MAIN_MENU);
     cd4:	8d e4       	ldi	r24, 0x4D	; 77
     cd6:	0e 94 30 06 	call	0xc60	; 0xc60 <sendByte>
	/*receive user choice (+) or (-) from the HMI_ECU*/
	choice = receiveByte();
     cda:	0e 94 41 06 	call	0xc82	; 0xc82 <receiveByte>
     cde:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * this short if just display on lcd (enter pass or enter old pass)depend on
	 * if open door -> enter pass
	 * if change pass -> enter old pass
	 */
	choice =='+'?askOldPass(ENTER_PASS):askOldPass(ENTER_OLD_PASS);
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	8b 32       	cpi	r24, 0x2B	; 43
     ce4:	21 f4       	brne	.+8      	; 0xcee <mainMenu+0x26>
     ce6:	80 e5       	ldi	r24, 0x50	; 80
     ce8:	0e 94 c7 06 	call	0xd8e	; 0xd8e <askOldPass>
     cec:	03 c0       	rjmp	.+6      	; 0xcf4 <mainMenu+0x2c>
     cee:	84 e4       	ldi	r24, 0x44	; 68
     cf0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <askOldPass>
	/*
	 * isCorrectPass() -> compare the entered pass g_pass2 with the saved one
	 * if match return true if not return false
	 */
	if(! isCorrectPass())
     cf4:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <isCorrectPass>
     cf8:	88 23       	and	r24, r24
     cfa:	01 f5       	brne	.+64     	; 0xd3c <mainMenu+0x74>
	{
		/*count how many times the user enter the pass wrong*/
		g_wrongPassCount++;
     cfc:	80 91 6e 00 	lds	r24, 0x006E
     d00:	8f 5f       	subi	r24, 0xFF	; 255
     d02:	80 93 6e 00 	sts	0x006E, r24
		for(uint8 i=0;i<2;i++)
     d06:	19 82       	std	Y+1, r1	; 0x01
     d08:	16 c0       	rjmp	.+44     	; 0xd36 <mainMenu+0x6e>
		{
			/*to check how many tries left*/
			if(i==0)
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	88 23       	and	r24, r24
     d0e:	21 f4       	brne	.+8      	; 0xd18 <mainMenu+0x50>
			{askOldPass(YOU_HAVE_2_TRIES);}
     d10:	82 e3       	ldi	r24, 0x32	; 50
     d12:	0e 94 c7 06 	call	0xd8e	; 0xd8e <askOldPass>
     d16:	03 c0       	rjmp	.+6      	; 0xd1e <mainMenu+0x56>
			else
			{askOldPass(YOU_HAVE_1_TRIES);}
     d18:	81 e3       	ldi	r24, 0x31	; 49
     d1a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <askOldPass>
			/*if the user enter the correct pass break the for(i=0;i<2;i++)*/
			if(isCorrectPass())
     d1e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <isCorrectPass>
     d22:	88 23       	and	r24, r24
     d24:	59 f4       	brne	.+22     	; 0xd3c <mainMenu+0x74>
			{
				break;
			}else
			{
				g_wrongPassCount++;
     d26:	80 91 6e 00 	lds	r24, 0x006E
     d2a:	8f 5f       	subi	r24, 0xFF	; 255
     d2c:	80 93 6e 00 	sts	0x006E, r24
	 */
	if(! isCorrectPass())
	{
		/*count how many times the user enter the pass wrong*/
		g_wrongPassCount++;
		for(uint8 i=0;i<2;i++)
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	8f 5f       	subi	r24, 0xFF	; 255
     d34:	89 83       	std	Y+1, r24	; 0x01
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	82 30       	cpi	r24, 0x02	; 2
     d3a:	38 f3       	brcs	.-50     	; 0xd0a <mainMenu+0x42>
	}



	/*check if the pass enter max wrong times */
	if(g_wrongPassCount >= 3)
     d3c:	80 91 6e 00 	lds	r24, 0x006E
     d40:	83 30       	cpi	r24, 0x03	; 3
     d42:	18 f0       	brcs	.+6      	; 0xd4a <mainMenu+0x82>
	{
		locking();
     d44:	0e 94 33 07 	call	0xe66	; 0xe66 <locking>
     d48:	1b c0       	rjmp	.+54     	; 0xd80 <mainMenu+0xb8>
	}else
	{
		switch (choice)
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	3c 83       	std	Y+4, r19	; 0x04
     d52:	2b 83       	std	Y+3, r18	; 0x03
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	9c 81       	ldd	r25, Y+4	; 0x04
     d58:	8b 32       	cpi	r24, 0x2B	; 43
     d5a:	91 05       	cpc	r25, r1
     d5c:	31 f0       	breq	.+12     	; 0xd6a <mainMenu+0xa2>
     d5e:	2b 81       	ldd	r18, Y+3	; 0x03
     d60:	3c 81       	ldd	r19, Y+4	; 0x04
     d62:	2d 32       	cpi	r18, 0x2D	; 45
     d64:	31 05       	cpc	r19, r1
     d66:	21 f0       	breq	.+8      	; 0xd70 <mainMenu+0xa8>
     d68:	06 c0       	rjmp	.+12     	; 0xd76 <mainMenu+0xae>
		{
		case'+':
			openDoor();
     d6a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <openDoor>
     d6e:	06 c0       	rjmp	.+12     	; 0xd7c <mainMenu+0xb4>
			break;
		case'-':
			firstTimeMenu();
     d70:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <firstTimeMenu>
     d74:	03 c0       	rjmp	.+6      	; 0xd7c <mainMenu+0xb4>
			break;
		default:
			/*ask the HMI_ECU to display WRONG_CHOICE*/
			sendByte(WRONG_CHOICE);
     d76:	87 e5       	ldi	r24, 0x57	; 87
     d78:	0e 94 30 06 	call	0xc60	; 0xc60 <sendByte>
			break;
		}
		g_wrongPassCount =0;
     d7c:	10 92 6e 00 	sts	0x006E, r1
	}


}
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <askOldPass>:
void askOldPass(uint8 message){
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	0f 92       	push	r0
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	89 83       	std	Y+1, r24	; 0x01
	/*-ask HMI to display "message"
	 *-receive the pass
	 *-send the pass back and save it in g_pass2*/
	sendByte(message);
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	0e 94 30 06 	call	0xc60	; 0xc60 <sendByte>
	/*receive the input pass from user through uart*/
	receiveString(g_pass2);
     da0:	8b e8       	ldi	r24, 0x8B	; 139
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 51 06 	call	0xca2	; 0xca2 <receiveString>
}
     da8:	0f 90       	pop	r0
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <openDoor>:
void openDoor(){
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
	sendByte(OPEN_DOOR);
     db8:	8f e4       	ldi	r24, 0x4F	; 79
     dba:	0e 94 30 06 	call	0xc60	; 0xc60 <sendByte>
	/*open door for 3 seconds*/
	DcMotor_Rotate(CW,250);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	6a ef       	ldi	r22, 0xFA	; 250
     dc2:	0e 94 1f 08 	call	0x103e	; 0x103e <DcMotor_Rotate>
	Timer1_delay_sec();
     dc6:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_delay_sec>
	Timer1_delay_sec();
     dca:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_delay_sec>
	/*keep the door open for 2 seconds*/
	DcMotor_Rotate(stop,0);
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	0e 94 1f 08 	call	0x103e	; 0x103e <DcMotor_Rotate>
	Timer1_delay_sec();/*close the door*/
     dd6:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_delay_sec>
	DcMotor_Rotate(CCW,250);
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	6a ef       	ldi	r22, 0xFA	; 250
     dde:	0e 94 1f 08 	call	0x103e	; 0x103e <DcMotor_Rotate>
	Timer1_delay_sec();
     de2:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_delay_sec>
	Timer1_delay_sec();
     de6:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_delay_sec>
	DcMotor_Rotate(stop,0);
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	0e 94 1f 08 	call	0x103e	; 0x103e <DcMotor_Rotate>
}
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <isCorrectPass>:
/*
 * check if the pass user enter which saved in g_pass2 is the same g_savedPass->(from eeprom)
 * and set the g_pass2 equal zero before return true if match false if not
 */
boolean isCorrectPass(){
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <isCorrectPass+0x6>
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
	uint8 i=0;
     e02:	19 82       	std	Y+1, r1	; 0x01
     e04:	1a c0       	rjmp	.+52     	; 0xe3a <isCorrectPass+0x42>
	/*loop with length of g_savedPass as it is the correct one*/
	while(g_savedPass[i] != '\0')
	{
		/*if the pass don't match return false*/
		if(g_savedPass[i] != g_pass2[i])
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	88 2f       	mov	r24, r24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	fc 01       	movw	r30, r24
     e0e:	e9 58       	subi	r30, 0x89	; 137
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	20 81       	ld	r18, Z
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	88 2f       	mov	r24, r24
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	fc 01       	movw	r30, r24
     e1c:	e5 57       	subi	r30, 0x75	; 117
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	80 81       	ld	r24, Z
     e22:	28 17       	cp	r18, r24
     e24:	39 f0       	breq	.+14     	; 0xe34 <isCorrectPass+0x3c>
		{
			freeStr(g_pass2,20);
     e26:	8b e8       	ldi	r24, 0x8B	; 139
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	64 e1       	ldi	r22, 0x14	; 20
     e2c:	0e 94 47 07 	call	0xe8e	; 0xe8e <freeStr>
			return FALSE;
     e30:	1a 82       	std	Y+2, r1	; 0x02
     e32:	13 c0       	rjmp	.+38     	; 0xe5a <isCorrectPass+0x62>
		}
		i++;
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	8f 5f       	subi	r24, 0xFF	; 255
     e38:	89 83       	std	Y+1, r24	; 0x01
 * and set the g_pass2 equal zero before return true if match false if not
 */
boolean isCorrectPass(){
	uint8 i=0;
	/*loop with length of g_savedPass as it is the correct one*/
	while(g_savedPass[i] != '\0')
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	88 2f       	mov	r24, r24
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	fc 01       	movw	r30, r24
     e42:	e9 58       	subi	r30, 0x89	; 137
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	80 81       	ld	r24, Z
     e48:	88 23       	and	r24, r24
     e4a:	e9 f6       	brne	.-70     	; 0xe06 <isCorrectPass+0xe>
			return FALSE;
		}
		i++;
	}
	/*if the pass match return true*/
	freeStr(g_pass2,20);
     e4c:	8b e8       	ldi	r24, 0x8B	; 139
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	64 e1       	ldi	r22, 0x14	; 20
     e52:	0e 94 47 07 	call	0xe8e	; 0xe8e <freeStr>
	return TRUE;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	8a 83       	std	Y+2, r24	; 0x02
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
}
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <locking>:

void locking(void){
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	sendByte(LOCKING);
     e6e:	84 e5       	ldi	r24, 0x54	; 84
     e70:	0e 94 30 06 	call	0xc60	; 0xc60 <sendByte>
	Buzzer_On();
     e74:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_On>
	Timer1_delay_sec();
     e78:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_delay_sec>
	Timer1_delay_sec();
     e7c:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_delay_sec>
	Timer1_delay_sec();
     e80:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Timer1_delay_sec>
	Buzzer_Off();
     e84:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_Off>
}
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <freeStr>:
void freeStr(uint8 * str,uint8 str_size){
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <freeStr+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <freeStr+0x8>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	9b 83       	std	Y+3, r25	; 0x03
     e9c:	8a 83       	std	Y+2, r24	; 0x02
     e9e:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8 i=0;i<str_size;i++)
     ea0:	19 82       	std	Y+1, r1	; 0x01
     ea2:	0c c0       	rjmp	.+24     	; 0xebc <freeStr+0x2e>
	{
		str[i]=0;
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	9b 81       	ldd	r25, Y+3	; 0x03
     eae:	fc 01       	movw	r30, r24
     eb0:	e2 0f       	add	r30, r18
     eb2:	f3 1f       	adc	r31, r19
     eb4:	10 82       	st	Z, r1
	Timer1_delay_sec();
	Timer1_delay_sec();
	Buzzer_Off();
}
void freeStr(uint8 * str,uint8 str_size){
	for(uint8 i=0;i<str_size;i++)
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	8f 5f       	subi	r24, 0xFF	; 255
     eba:	89 83       	std	Y+1, r24	; 0x01
     ebc:	99 81       	ldd	r25, Y+1	; 0x01
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	98 17       	cp	r25, r24
     ec2:	80 f3       	brcs	.-32     	; 0xea4 <freeStr+0x16>
	{
		str[i]=0;
	}
}
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <eepromWriteStr>:

void eepromWriteStr(uint8 * str){
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <eepromWriteStr+0x6>
     ed8:	00 d0       	rcall	.+0      	; 0xeda <eepromWriteStr+0x8>
     eda:	0f 92       	push	r0
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	9d 83       	std	Y+5, r25	; 0x05
     ee2:	8c 83       	std	Y+4, r24	; 0x04
	uint8 i=0 ;
     ee4:	1b 82       	std	Y+3, r1	; 0x03
	uint16 startAddress = (uint16)0x1111;
     ee6:	81 e1       	ldi	r24, 0x11	; 17
     ee8:	91 e1       	ldi	r25, 0x11	; 17
     eea:	9a 83       	std	Y+2, r25	; 0x02
     eec:	89 83       	std	Y+1, r24	; 0x01
     eee:	1c c0       	rjmp	.+56     	; 0xf28 <eepromWriteStr+0x56>
	while(str[i] != '\0')
	{
		EEPROM_writeByte((uint16)startAddress+i,str[i]);
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	a9 01       	movw	r20, r18
     efc:	48 0f       	add	r20, r24
     efe:	59 1f       	adc	r21, r25
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	8c 81       	ldd	r24, Y+4	; 0x04
     f08:	9d 81       	ldd	r25, Y+5	; 0x05
     f0a:	fc 01       	movw	r30, r24
     f0c:	e2 0f       	add	r30, r18
     f0e:	f3 1f       	adc	r31, r19
     f10:	20 81       	ld	r18, Z
     f12:	ca 01       	movw	r24, r20
     f14:	62 2f       	mov	r22, r18
     f16:	0e 94 61 08 	call	0x10c2	; 0x10c2 <EEPROM_writeByte>
		Timer1_delay_10msec();
     f1a:	0e 94 0f 14 	call	0x281e	; 0x281e <Timer1_delay_10msec>
		Timer1_delay_10msec();
     f1e:	0e 94 0f 14 	call	0x281e	; 0x281e <Timer1_delay_10msec>
		i++;
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	8b 83       	std	Y+3, r24	; 0x03
}

void eepromWriteStr(uint8 * str){
	uint8 i=0 ;
	uint16 startAddress = (uint16)0x1111;
	while(str[i] != '\0')
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	9d 81       	ldd	r25, Y+5	; 0x05
     f32:	fc 01       	movw	r30, r24
     f34:	e2 0f       	add	r30, r18
     f36:	f3 1f       	adc	r31, r19
     f38:	80 81       	ld	r24, Z
     f3a:	88 23       	and	r24, r24
     f3c:	c9 f6       	brne	.-78     	; 0xef0 <eepromWriteStr+0x1e>
		EEPROM_writeByte((uint16)startAddress+i,str[i]);
		Timer1_delay_10msec();
		Timer1_delay_10msec();
		i++;
	}
	EEPROM_writeByte(startAddress+i,'#');
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	9a 81       	ldd	r25, Y+2	; 0x02
     f48:	82 0f       	add	r24, r18
     f4a:	93 1f       	adc	r25, r19
     f4c:	63 e2       	ldi	r22, 0x23	; 35
     f4e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <EEPROM_writeByte>
	Timer1_delay_10msec();
     f52:	0e 94 0f 14 	call	0x281e	; 0x281e <Timer1_delay_10msec>
	Timer1_delay_10msec();
     f56:	0e 94 0f 14 	call	0x281e	; 0x281e <Timer1_delay_10msec>
}
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <eepromReadStr>:

void eepromReadStr(uint8 * str){
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <eepromReadStr+0x6>
     f70:	00 d0       	rcall	.+0      	; 0xf72 <eepromReadStr+0x8>
     f72:	00 d0       	rcall	.+0      	; 0xf74 <eepromReadStr+0xa>
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	9e 83       	std	Y+6, r25	; 0x06
     f7a:	8d 83       	std	Y+5, r24	; 0x05
	uint8 i=0 ;
     f7c:	1b 82       	std	Y+3, r1	; 0x03
	uint16 startAddress = (uint16)0x01;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9a 83       	std	Y+2, r25	; 0x02
     f84:	89 83       	std	Y+1, r24	; 0x01
	uint8 data;
	EEPROM_readByte(startAddress+i,&data);
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	82 0f       	add	r24, r18
     f92:	93 1f       	adc	r25, r19
     f94:	9e 01       	movw	r18, r28
     f96:	2c 5f       	subi	r18, 0xFC	; 252
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	b9 01       	movw	r22, r18
     f9c:	0e 94 a2 08 	call	0x1144	; 0x1144 <EEPROM_readByte>
     fa0:	1e c0       	rjmp	.+60     	; 0xfde <eepromReadStr+0x74>
	while(data !='#')
	{
		str[i]=data;
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	8d 81       	ldd	r24, Y+5	; 0x05
     faa:	9e 81       	ldd	r25, Y+6	; 0x06
     fac:	fc 01       	movw	r30, r24
     fae:	e2 0f       	add	r30, r18
     fb0:	f3 1f       	adc	r31, r19
     fb2:	8c 81       	ldd	r24, Y+4	; 0x04
     fb4:	80 83       	st	Z, r24
		i++;
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	8f 5f       	subi	r24, 0xFF	; 255
     fba:	8b 83       	std	Y+3, r24	; 0x03
		EEPROM_readByte(startAddress+i,&data);
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	9a 81       	ldd	r25, Y+2	; 0x02
     fc6:	82 0f       	add	r24, r18
     fc8:	93 1f       	adc	r25, r19
     fca:	9e 01       	movw	r18, r28
     fcc:	2c 5f       	subi	r18, 0xFC	; 252
     fce:	3f 4f       	sbci	r19, 0xFF	; 255
     fd0:	b9 01       	movw	r22, r18
     fd2:	0e 94 a2 08 	call	0x1144	; 0x1144 <EEPROM_readByte>
		Timer1_delay_10msec();
     fd6:	0e 94 0f 14 	call	0x281e	; 0x281e <Timer1_delay_10msec>
		Timer1_delay_10msec();
     fda:	0e 94 0f 14 	call	0x281e	; 0x281e <Timer1_delay_10msec>
void eepromReadStr(uint8 * str){
	uint8 i=0 ;
	uint16 startAddress = (uint16)0x01;
	uint8 data;
	EEPROM_readByte(startAddress+i,&data);
	while(data !='#')
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	83 32       	cpi	r24, 0x23	; 35
     fe2:	f9 f6       	brne	.-66     	; 0xfa2 <eepromReadStr+0x38>
		i++;
		EEPROM_readByte(startAddress+i,&data);
		Timer1_delay_10msec();
		Timer1_delay_10msec();
	}
	str[i] = '\0';
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	fc 01       	movw	r30, r24
     ff0:	e2 0f       	add	r30, r18
     ff2:	f3 1f       	adc	r31, r19
     ff4:	10 82       	st	Z, r1
}
     ff6:	26 96       	adiw	r28, 0x06	; 6
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <DcMotor_Init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void DcMotor_Init(void){
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MotorCW_port,MotorCW_pin,PIN_OUTPUT);
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	41 e0       	ldi	r20, 0x01	; 1
    1016:	0e 94 02 09 	call	0x1204	; 0x1204 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MotorA_CW_port,MotorCCW_pin,PIN_OUTPUT);
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	61 e0       	ldi	r22, 0x01	; 1
    101e:	41 e0       	ldi	r20, 0x01	; 1
    1020:	0e 94 02 09 	call	0x1204	; 0x1204 <GPIO_setupPinDirection>
	GPIO_writePin(MotorCW_port,MotorCW_pin,LOGIC_LOW);
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>
	GPIO_writePin(MotorA_CW_port,MotorCCW_pin,LOGIC_LOW);
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	61 e0       	ldi	r22, 0x01	; 1
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>
}
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed)

{
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	00 d0       	rcall	.+0      	; 0x1044 <DcMotor_Rotate+0x6>
    1044:	00 d0       	rcall	.+0      	; 0x1046 <DcMotor_Rotate+0x8>
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	6a 83       	std	Y+2, r22	; 0x02
	switch(state){
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	3c 83       	std	Y+4, r19	; 0x04
    1056:	2b 83       	std	Y+3, r18	; 0x03
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	9c 81       	ldd	r25, Y+4	; 0x04
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	91 05       	cpc	r25, r1
    1060:	a1 f0       	breq	.+40     	; 0x108a <DcMotor_Rotate+0x4c>
    1062:	2b 81       	ldd	r18, Y+3	; 0x03
    1064:	3c 81       	ldd	r19, Y+4	; 0x04
    1066:	22 30       	cpi	r18, 0x02	; 2
    1068:	31 05       	cpc	r19, r1
    106a:	d1 f0       	breq	.+52     	; 0x10a0 <DcMotor_Rotate+0x62>
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	9c 81       	ldd	r25, Y+4	; 0x04
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	01 f5       	brne	.+64     	; 0x10b4 <DcMotor_Rotate+0x76>
	case stop:
		GPIO_writePin(MotorCW_port,MotorCW_pin,LOGIC_HIGH);
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	41 e0       	ldi	r20, 0x01	; 1
    107a:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>
		GPIO_writePin(MotorA_CW_port,MotorCCW_pin,LOGIC_HIGH);
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	61 e0       	ldi	r22, 0x01	; 1
    1082:	41 e0       	ldi	r20, 0x01	; 1
    1084:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>
    1088:	15 c0       	rjmp	.+42     	; 0x10b4 <DcMotor_Rotate+0x76>
		break;
	case CW:
		GPIO_writePin(MotorCW_port,MotorCW_pin,LOGIC_HIGH);
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	41 e0       	ldi	r20, 0x01	; 1
    1090:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>
		GPIO_writePin(MotorA_CW_port,MotorCCW_pin,LOGIC_LOW);
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	61 e0       	ldi	r22, 0x01	; 1
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>
    109e:	0a c0       	rjmp	.+20     	; 0x10b4 <DcMotor_Rotate+0x76>
		break;
	case CCW:
		GPIO_writePin(MotorCW_port,MotorCW_pin,LOGIC_LOW);
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>
		GPIO_writePin(MotorA_CW_port,MotorCCW_pin,LOGIC_HIGH);
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	61 e0       	ldi	r22, 0x01	; 1
    10ae:	41 e0       	ldi	r20, 0x01	; 1
    10b0:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>

	 PWM_Timer0_Init(speed);


	}
}
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <EEPROM_writeByte+0x6>
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <EEPROM_writeByte+0x8>
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	9a 83       	std	Y+2, r25	; 0x02
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    10d4:	0e 94 80 14 	call	0x2900	; 0x2900 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    10d8:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <TWI_getStatus>
    10dc:	88 30       	cpi	r24, 0x08	; 8
    10de:	11 f0       	breq	.+4      	; 0x10e4 <EEPROM_writeByte+0x22>
        return ERROR;
    10e0:	1c 82       	std	Y+4, r1	; 0x04
    10e2:	28 c0       	rjmp	.+80     	; 0x1134 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	9a 81       	ldd	r25, Y+2	; 0x02
    10e8:	80 70       	andi	r24, 0x00	; 0
    10ea:	97 70       	andi	r25, 0x07	; 7
    10ec:	88 0f       	add	r24, r24
    10ee:	89 2f       	mov	r24, r25
    10f0:	88 1f       	adc	r24, r24
    10f2:	99 0b       	sbc	r25, r25
    10f4:	91 95       	neg	r25
    10f6:	80 6a       	ori	r24, 0xA0	; 160
    10f8:	0e 94 9b 14 	call	0x2936	; 0x2936 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    10fc:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <TWI_getStatus>
    1100:	88 31       	cpi	r24, 0x18	; 24
    1102:	11 f0       	breq	.+4      	; 0x1108 <EEPROM_writeByte+0x46>
        return ERROR; 
    1104:	1c 82       	std	Y+4, r1	; 0x04
    1106:	16 c0       	rjmp	.+44     	; 0x1134 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	0e 94 9b 14 	call	0x2936	; 0x2936 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    110e:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <TWI_getStatus>
    1112:	88 32       	cpi	r24, 0x28	; 40
    1114:	11 f0       	breq	.+4      	; 0x111a <EEPROM_writeByte+0x58>
        return ERROR;
    1116:	1c 82       	std	Y+4, r1	; 0x04
    1118:	0d c0       	rjmp	.+26     	; 0x1134 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	0e 94 9b 14 	call	0x2936	; 0x2936 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1120:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <TWI_getStatus>
    1124:	88 32       	cpi	r24, 0x28	; 40
    1126:	11 f0       	breq	.+4      	; 0x112c <EEPROM_writeByte+0x6a>
        return ERROR;
    1128:	1c 82       	std	Y+4, r1	; 0x04
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    112c:	0e 94 90 14 	call	0x2920	; 0x2920 <TWI_stop>
	
    return SUCCESS;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	8c 83       	std	Y+4, r24	; 0x04
    1134:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	00 d0       	rcall	.+0      	; 0x114a <EEPROM_readByte+0x6>
    114a:	00 d0       	rcall	.+0      	; 0x114c <EEPROM_readByte+0x8>
    114c:	0f 92       	push	r0
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	9a 83       	std	Y+2, r25	; 0x02
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	7c 83       	std	Y+4, r23	; 0x04
    1158:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    115a:	0e 94 80 14 	call	0x2900	; 0x2900 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    115e:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <TWI_getStatus>
    1162:	88 30       	cpi	r24, 0x08	; 8
    1164:	11 f0       	breq	.+4      	; 0x116a <EEPROM_readByte+0x26>
        return ERROR;
    1166:	1d 82       	std	Y+5, r1	; 0x05
    1168:	44 c0       	rjmp	.+136    	; 0x11f2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	80 70       	andi	r24, 0x00	; 0
    1170:	97 70       	andi	r25, 0x07	; 7
    1172:	88 0f       	add	r24, r24
    1174:	89 2f       	mov	r24, r25
    1176:	88 1f       	adc	r24, r24
    1178:	99 0b       	sbc	r25, r25
    117a:	91 95       	neg	r25
    117c:	80 6a       	ori	r24, 0xA0	; 160
    117e:	0e 94 9b 14 	call	0x2936	; 0x2936 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1182:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <TWI_getStatus>
    1186:	88 31       	cpi	r24, 0x18	; 24
    1188:	11 f0       	breq	.+4      	; 0x118e <EEPROM_readByte+0x4a>
        return ERROR;
    118a:	1d 82       	std	Y+5, r1	; 0x05
    118c:	32 c0       	rjmp	.+100    	; 0x11f2 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	0e 94 9b 14 	call	0x2936	; 0x2936 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1194:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <TWI_getStatus>
    1198:	88 32       	cpi	r24, 0x28	; 40
    119a:	11 f0       	breq	.+4      	; 0x11a0 <EEPROM_readByte+0x5c>
        return ERROR;
    119c:	1d 82       	std	Y+5, r1	; 0x05
    119e:	29 c0       	rjmp	.+82     	; 0x11f2 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    11a0:	0e 94 80 14 	call	0x2900	; 0x2900 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    11a4:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <TWI_getStatus>
    11a8:	80 31       	cpi	r24, 0x10	; 16
    11aa:	11 f0       	breq	.+4      	; 0x11b0 <EEPROM_readByte+0x6c>
        return ERROR;
    11ac:	1d 82       	std	Y+5, r1	; 0x05
    11ae:	21 c0       	rjmp	.+66     	; 0x11f2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	9a 81       	ldd	r25, Y+2	; 0x02
    11b4:	80 70       	andi	r24, 0x00	; 0
    11b6:	97 70       	andi	r25, 0x07	; 7
    11b8:	88 0f       	add	r24, r24
    11ba:	89 2f       	mov	r24, r25
    11bc:	88 1f       	adc	r24, r24
    11be:	99 0b       	sbc	r25, r25
    11c0:	91 95       	neg	r25
    11c2:	81 6a       	ori	r24, 0xA1	; 161
    11c4:	0e 94 9b 14 	call	0x2936	; 0x2936 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    11c8:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <TWI_getStatus>
    11cc:	80 34       	cpi	r24, 0x40	; 64
    11ce:	11 f0       	breq	.+4      	; 0x11d4 <EEPROM_readByte+0x90>
        return ERROR;
    11d0:	1d 82       	std	Y+5, r1	; 0x05
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    11d4:	0e 94 c5 14 	call	0x298a	; 0x298a <TWI_readByteWithNACK>
    11d8:	eb 81       	ldd	r30, Y+3	; 0x03
    11da:	fc 81       	ldd	r31, Y+4	; 0x04
    11dc:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    11de:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <TWI_getStatus>
    11e2:	88 35       	cpi	r24, 0x58	; 88
    11e4:	11 f0       	breq	.+4      	; 0x11ea <EEPROM_readByte+0xa6>
        return ERROR;
    11e6:	1d 82       	std	Y+5, r1	; 0x05
    11e8:	04 c0       	rjmp	.+8      	; 0x11f2 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    11ea:	0e 94 90 14 	call	0x2920	; 0x2920 <TWI_stop>

    return SUCCESS;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	8d 83       	std	Y+5, r24	; 0x05
    11f2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	00 d0       	rcall	.+0      	; 0x120a <GPIO_setupPinDirection+0x6>
    120a:	00 d0       	rcall	.+0      	; 0x120c <GPIO_setupPinDirection+0x8>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	6a 83       	std	Y+2, r22	; 0x02
    1216:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	88 30       	cpi	r24, 0x08	; 8
    121c:	08 f0       	brcs	.+2      	; 0x1220 <GPIO_setupPinDirection+0x1c>
    121e:	d5 c0       	rjmp	.+426    	; 0x13ca <GPIO_setupPinDirection+0x1c6>
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	84 30       	cpi	r24, 0x04	; 4
    1224:	08 f0       	brcs	.+2      	; 0x1228 <GPIO_setupPinDirection+0x24>
    1226:	d1 c0       	rjmp	.+418    	; 0x13ca <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	3d 83       	std	Y+5, r19	; 0x05
    1230:	2c 83       	std	Y+4, r18	; 0x04
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	9d 81       	ldd	r25, Y+5	; 0x05
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	91 05       	cpc	r25, r1
    123a:	09 f4       	brne	.+2      	; 0x123e <GPIO_setupPinDirection+0x3a>
    123c:	43 c0       	rjmp	.+134    	; 0x12c4 <GPIO_setupPinDirection+0xc0>
    123e:	2c 81       	ldd	r18, Y+4	; 0x04
    1240:	3d 81       	ldd	r19, Y+5	; 0x05
    1242:	22 30       	cpi	r18, 0x02	; 2
    1244:	31 05       	cpc	r19, r1
    1246:	2c f4       	brge	.+10     	; 0x1252 <GPIO_setupPinDirection+0x4e>
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	9d 81       	ldd	r25, Y+5	; 0x05
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	71 f0       	breq	.+28     	; 0x126c <GPIO_setupPinDirection+0x68>
    1250:	bc c0       	rjmp	.+376    	; 0x13ca <GPIO_setupPinDirection+0x1c6>
    1252:	2c 81       	ldd	r18, Y+4	; 0x04
    1254:	3d 81       	ldd	r19, Y+5	; 0x05
    1256:	22 30       	cpi	r18, 0x02	; 2
    1258:	31 05       	cpc	r19, r1
    125a:	09 f4       	brne	.+2      	; 0x125e <GPIO_setupPinDirection+0x5a>
    125c:	5f c0       	rjmp	.+190    	; 0x131c <GPIO_setupPinDirection+0x118>
    125e:	8c 81       	ldd	r24, Y+4	; 0x04
    1260:	9d 81       	ldd	r25, Y+5	; 0x05
    1262:	83 30       	cpi	r24, 0x03	; 3
    1264:	91 05       	cpc	r25, r1
    1266:	09 f4       	brne	.+2      	; 0x126a <GPIO_setupPinDirection+0x66>
    1268:	85 c0       	rjmp	.+266    	; 0x1374 <GPIO_setupPinDirection+0x170>
    126a:	af c0       	rjmp	.+350    	; 0x13ca <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	a1 f4       	brne	.+40     	; 0x129a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1272:	aa e3       	ldi	r26, 0x3A	; 58
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	ea e3       	ldi	r30, 0x3A	; 58
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <GPIO_setupPinDirection+0x8c>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <GPIO_setupPinDirection+0x88>
    1294:	84 2b       	or	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	98 c0       	rjmp	.+304    	; 0x13ca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    129a:	aa e3       	ldi	r26, 0x3A	; 58
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	ea e3       	ldi	r30, 0x3A	; 58
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <GPIO_setupPinDirection+0xb4>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <GPIO_setupPinDirection+0xb0>
    12bc:	80 95       	com	r24
    12be:	84 23       	and	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	83 c0       	rjmp	.+262    	; 0x13ca <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	a1 f4       	brne	.+40     	; 0x12f2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    12ca:	a7 e3       	ldi	r26, 0x37	; 55
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e7 e3       	ldi	r30, 0x37	; 55
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <GPIO_setupPinDirection+0xe4>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <GPIO_setupPinDirection+0xe0>
    12ec:	84 2b       	or	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	6c c0       	rjmp	.+216    	; 0x13ca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    12f2:	a7 e3       	ldi	r26, 0x37	; 55
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e7 e3       	ldi	r30, 0x37	; 55
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <GPIO_setupPinDirection+0x10c>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <GPIO_setupPinDirection+0x108>
    1314:	80 95       	com	r24
    1316:	84 23       	and	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	57 c0       	rjmp	.+174    	; 0x13ca <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	a1 f4       	brne	.+40     	; 0x134a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1322:	a4 e3       	ldi	r26, 0x34	; 52
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e4 e3       	ldi	r30, 0x34	; 52
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <GPIO_setupPinDirection+0x13c>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <GPIO_setupPinDirection+0x138>
    1344:	84 2b       	or	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	40 c0       	rjmp	.+128    	; 0x13ca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    134a:	a4 e3       	ldi	r26, 0x34	; 52
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e4 e3       	ldi	r30, 0x34	; 52
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <GPIO_setupPinDirection+0x164>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <GPIO_setupPinDirection+0x160>
    136c:	80 95       	com	r24
    136e:	84 23       	and	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	2b c0       	rjmp	.+86     	; 0x13ca <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	a1 f4       	brne	.+40     	; 0x13a2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    137a:	a1 e3       	ldi	r26, 0x31	; 49
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e1 e3       	ldi	r30, 0x31	; 49
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <GPIO_setupPinDirection+0x194>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <GPIO_setupPinDirection+0x190>
    139c:	84 2b       	or	r24, r20
    139e:	8c 93       	st	X, r24
    13a0:	14 c0       	rjmp	.+40     	; 0x13ca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    13a2:	a1 e3       	ldi	r26, 0x31	; 49
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e1 e3       	ldi	r30, 0x31	; 49
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <GPIO_setupPinDirection+0x1bc>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <GPIO_setupPinDirection+0x1b8>
    13c4:	80 95       	com	r24
    13c6:	84 23       	and	r24, r20
    13c8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <GPIO_writePin+0x6>
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <GPIO_writePin+0x8>
    13e2:	0f 92       	push	r0
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	6a 83       	std	Y+2, r22	; 0x02
    13ec:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	88 30       	cpi	r24, 0x08	; 8
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <GPIO_writePin+0x1c>
    13f4:	d5 c0       	rjmp	.+426    	; 0x15a0 <GPIO_writePin+0x1c6>
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	84 30       	cpi	r24, 0x04	; 4
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <GPIO_writePin+0x24>
    13fc:	d1 c0       	rjmp	.+418    	; 0x15a0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3d 83       	std	Y+5, r19	; 0x05
    1406:	2c 83       	std	Y+4, r18	; 0x04
    1408:	8c 81       	ldd	r24, Y+4	; 0x04
    140a:	9d 81       	ldd	r25, Y+5	; 0x05
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	91 05       	cpc	r25, r1
    1410:	09 f4       	brne	.+2      	; 0x1414 <GPIO_writePin+0x3a>
    1412:	43 c0       	rjmp	.+134    	; 0x149a <GPIO_writePin+0xc0>
    1414:	2c 81       	ldd	r18, Y+4	; 0x04
    1416:	3d 81       	ldd	r19, Y+5	; 0x05
    1418:	22 30       	cpi	r18, 0x02	; 2
    141a:	31 05       	cpc	r19, r1
    141c:	2c f4       	brge	.+10     	; 0x1428 <GPIO_writePin+0x4e>
    141e:	8c 81       	ldd	r24, Y+4	; 0x04
    1420:	9d 81       	ldd	r25, Y+5	; 0x05
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	71 f0       	breq	.+28     	; 0x1442 <GPIO_writePin+0x68>
    1426:	bc c0       	rjmp	.+376    	; 0x15a0 <GPIO_writePin+0x1c6>
    1428:	2c 81       	ldd	r18, Y+4	; 0x04
    142a:	3d 81       	ldd	r19, Y+5	; 0x05
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	09 f4       	brne	.+2      	; 0x1434 <GPIO_writePin+0x5a>
    1432:	5f c0       	rjmp	.+190    	; 0x14f2 <GPIO_writePin+0x118>
    1434:	8c 81       	ldd	r24, Y+4	; 0x04
    1436:	9d 81       	ldd	r25, Y+5	; 0x05
    1438:	83 30       	cpi	r24, 0x03	; 3
    143a:	91 05       	cpc	r25, r1
    143c:	09 f4       	brne	.+2      	; 0x1440 <GPIO_writePin+0x66>
    143e:	85 c0       	rjmp	.+266    	; 0x154a <GPIO_writePin+0x170>
    1440:	af c0       	rjmp	.+350    	; 0x15a0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	a1 f4       	brne	.+40     	; 0x1470 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1448:	ab e3       	ldi	r26, 0x3B	; 59
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	eb e3       	ldi	r30, 0x3B	; 59
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <GPIO_writePin+0x8c>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <GPIO_writePin+0x88>
    146a:	84 2b       	or	r24, r20
    146c:	8c 93       	st	X, r24
    146e:	98 c0       	rjmp	.+304    	; 0x15a0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1470:	ab e3       	ldi	r26, 0x3B	; 59
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	eb e3       	ldi	r30, 0x3B	; 59
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	48 2f       	mov	r20, r24
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	02 2e       	mov	r0, r18
    1488:	02 c0       	rjmp	.+4      	; 0x148e <GPIO_writePin+0xb4>
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	0a 94       	dec	r0
    1490:	e2 f7       	brpl	.-8      	; 0x148a <GPIO_writePin+0xb0>
    1492:	80 95       	com	r24
    1494:	84 23       	and	r24, r20
    1496:	8c 93       	st	X, r24
    1498:	83 c0       	rjmp	.+262    	; 0x15a0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	a1 f4       	brne	.+40     	; 0x14c8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    14a0:	a8 e3       	ldi	r26, 0x38	; 56
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e8 e3       	ldi	r30, 0x38	; 56
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	48 2f       	mov	r20, r24
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 2e       	mov	r0, r18
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <GPIO_writePin+0xe4>
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	0a 94       	dec	r0
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <GPIO_writePin+0xe0>
    14c2:	84 2b       	or	r24, r20
    14c4:	8c 93       	st	X, r24
    14c6:	6c c0       	rjmp	.+216    	; 0x15a0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    14c8:	a8 e3       	ldi	r26, 0x38	; 56
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e8 e3       	ldi	r30, 0x38	; 56
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	48 2f       	mov	r20, r24
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 2e       	mov	r0, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <GPIO_writePin+0x10c>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	0a 94       	dec	r0
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <GPIO_writePin+0x108>
    14ea:	80 95       	com	r24
    14ec:	84 23       	and	r24, r20
    14ee:	8c 93       	st	X, r24
    14f0:	57 c0       	rjmp	.+174    	; 0x15a0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	a1 f4       	brne	.+40     	; 0x1520 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    14f8:	a5 e3       	ldi	r26, 0x35	; 53
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e5 e3       	ldi	r30, 0x35	; 53
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <GPIO_writePin+0x13c>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <GPIO_writePin+0x138>
    151a:	84 2b       	or	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	40 c0       	rjmp	.+128    	; 0x15a0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1520:	a5 e3       	ldi	r26, 0x35	; 53
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e5 e3       	ldi	r30, 0x35	; 53
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <GPIO_writePin+0x164>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <GPIO_writePin+0x160>
    1542:	80 95       	com	r24
    1544:	84 23       	and	r24, r20
    1546:	8c 93       	st	X, r24
    1548:	2b c0       	rjmp	.+86     	; 0x15a0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	a1 f4       	brne	.+40     	; 0x1578 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1550:	a2 e3       	ldi	r26, 0x32	; 50
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e2 e3       	ldi	r30, 0x32	; 50
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 2e       	mov	r0, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <GPIO_writePin+0x194>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	0a 94       	dec	r0
    1570:	e2 f7       	brpl	.-8      	; 0x156a <GPIO_writePin+0x190>
    1572:	84 2b       	or	r24, r20
    1574:	8c 93       	st	X, r24
    1576:	14 c0       	rjmp	.+40     	; 0x15a0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1578:	a2 e3       	ldi	r26, 0x32	; 50
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e2 e3       	ldi	r30, 0x32	; 50
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <GPIO_writePin+0x1bc>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <GPIO_writePin+0x1b8>
    159a:	80 95       	com	r24
    159c:	84 23       	and	r24, r20
    159e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <GPIO_readPin+0x6>
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <GPIO_readPin+0x8>
    15b8:	0f 92       	push	r0
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	8a 83       	std	Y+2, r24	; 0x02
    15c0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    15c2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	88 30       	cpi	r24, 0x08	; 8
    15c8:	08 f0       	brcs	.+2      	; 0x15cc <GPIO_readPin+0x1c>
    15ca:	84 c0       	rjmp	.+264    	; 0x16d4 <GPIO_readPin+0x124>
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	84 30       	cpi	r24, 0x04	; 4
    15d0:	08 f0       	brcs	.+2      	; 0x15d4 <GPIO_readPin+0x24>
    15d2:	80 c0       	rjmp	.+256    	; 0x16d4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	3d 83       	std	Y+5, r19	; 0x05
    15dc:	2c 83       	std	Y+4, r18	; 0x04
    15de:	4c 81       	ldd	r20, Y+4	; 0x04
    15e0:	5d 81       	ldd	r21, Y+5	; 0x05
    15e2:	41 30       	cpi	r20, 0x01	; 1
    15e4:	51 05       	cpc	r21, r1
    15e6:	79 f1       	breq	.+94     	; 0x1646 <GPIO_readPin+0x96>
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	9d 81       	ldd	r25, Y+5	; 0x05
    15ec:	82 30       	cpi	r24, 0x02	; 2
    15ee:	91 05       	cpc	r25, r1
    15f0:	34 f4       	brge	.+12     	; 0x15fe <GPIO_readPin+0x4e>
    15f2:	2c 81       	ldd	r18, Y+4	; 0x04
    15f4:	3d 81       	ldd	r19, Y+5	; 0x05
    15f6:	21 15       	cp	r18, r1
    15f8:	31 05       	cpc	r19, r1
    15fa:	69 f0       	breq	.+26     	; 0x1616 <GPIO_readPin+0x66>
    15fc:	6b c0       	rjmp	.+214    	; 0x16d4 <GPIO_readPin+0x124>
    15fe:	4c 81       	ldd	r20, Y+4	; 0x04
    1600:	5d 81       	ldd	r21, Y+5	; 0x05
    1602:	42 30       	cpi	r20, 0x02	; 2
    1604:	51 05       	cpc	r21, r1
    1606:	b9 f1       	breq	.+110    	; 0x1676 <GPIO_readPin+0xc6>
    1608:	8c 81       	ldd	r24, Y+4	; 0x04
    160a:	9d 81       	ldd	r25, Y+5	; 0x05
    160c:	83 30       	cpi	r24, 0x03	; 3
    160e:	91 05       	cpc	r25, r1
    1610:	09 f4       	brne	.+2      	; 0x1614 <GPIO_readPin+0x64>
    1612:	49 c0       	rjmp	.+146    	; 0x16a6 <GPIO_readPin+0xf6>
    1614:	5f c0       	rjmp	.+190    	; 0x16d4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1616:	e9 e3       	ldi	r30, 0x39	; 57
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a9 01       	movw	r20, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <GPIO_readPin+0x7e>
    162a:	55 95       	asr	r21
    162c:	47 95       	ror	r20
    162e:	8a 95       	dec	r24
    1630:	e2 f7       	brpl	.-8      	; 0x162a <GPIO_readPin+0x7a>
    1632:	ca 01       	movw	r24, r20
    1634:	81 70       	andi	r24, 0x01	; 1
    1636:	90 70       	andi	r25, 0x00	; 0
    1638:	88 23       	and	r24, r24
    163a:	19 f0       	breq	.+6      	; 0x1642 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	49 c0       	rjmp	.+146    	; 0x16d4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1642:	19 82       	std	Y+1, r1	; 0x01
    1644:	47 c0       	rjmp	.+142    	; 0x16d4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1646:	e6 e3       	ldi	r30, 0x36	; 54
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	a9 01       	movw	r20, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <GPIO_readPin+0xae>
    165a:	55 95       	asr	r21
    165c:	47 95       	ror	r20
    165e:	8a 95       	dec	r24
    1660:	e2 f7       	brpl	.-8      	; 0x165a <GPIO_readPin+0xaa>
    1662:	ca 01       	movw	r24, r20
    1664:	81 70       	andi	r24, 0x01	; 1
    1666:	90 70       	andi	r25, 0x00	; 0
    1668:	88 23       	and	r24, r24
    166a:	19 f0       	breq	.+6      	; 0x1672 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	31 c0       	rjmp	.+98     	; 0x16d4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1672:	19 82       	std	Y+1, r1	; 0x01
    1674:	2f c0       	rjmp	.+94     	; 0x16d4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1676:	e3 e3       	ldi	r30, 0x33	; 51
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	88 2f       	mov	r24, r24
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a9 01       	movw	r20, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <GPIO_readPin+0xde>
    168a:	55 95       	asr	r21
    168c:	47 95       	ror	r20
    168e:	8a 95       	dec	r24
    1690:	e2 f7       	brpl	.-8      	; 0x168a <GPIO_readPin+0xda>
    1692:	ca 01       	movw	r24, r20
    1694:	81 70       	andi	r24, 0x01	; 1
    1696:	90 70       	andi	r25, 0x00	; 0
    1698:	88 23       	and	r24, r24
    169a:	19 f0       	breq	.+6      	; 0x16a2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	19 c0       	rjmp	.+50     	; 0x16d4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16a2:	19 82       	std	Y+1, r1	; 0x01
    16a4:	17 c0       	rjmp	.+46     	; 0x16d4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    16a6:	e0 e3       	ldi	r30, 0x30	; 48
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	88 2f       	mov	r24, r24
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	a9 01       	movw	r20, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <GPIO_readPin+0x10e>
    16ba:	55 95       	asr	r21
    16bc:	47 95       	ror	r20
    16be:	8a 95       	dec	r24
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <GPIO_readPin+0x10a>
    16c2:	ca 01       	movw	r24, r20
    16c4:	81 70       	andi	r24, 0x01	; 1
    16c6:	90 70       	andi	r25, 0x00	; 0
    16c8:	88 23       	and	r24, r24
    16ca:	19 f0       	breq	.+6      	; 0x16d2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16d2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <GPIO_setupPortDirection+0x6>
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <GPIO_setupPortDirection+0x8>
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	84 30       	cpi	r24, 0x04	; 4
    16fa:	90 f5       	brcc	.+100    	; 0x1760 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	3c 83       	std	Y+4, r19	; 0x04
    1704:	2b 83       	std	Y+3, r18	; 0x03
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	91 05       	cpc	r25, r1
    170e:	d1 f0       	breq	.+52     	; 0x1744 <GPIO_setupPortDirection+0x5e>
    1710:	2b 81       	ldd	r18, Y+3	; 0x03
    1712:	3c 81       	ldd	r19, Y+4	; 0x04
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	2c f4       	brge	.+10     	; 0x1724 <GPIO_setupPortDirection+0x3e>
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	9c 81       	ldd	r25, Y+4	; 0x04
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	61 f0       	breq	.+24     	; 0x173a <GPIO_setupPortDirection+0x54>
    1722:	1e c0       	rjmp	.+60     	; 0x1760 <GPIO_setupPortDirection+0x7a>
    1724:	2b 81       	ldd	r18, Y+3	; 0x03
    1726:	3c 81       	ldd	r19, Y+4	; 0x04
    1728:	22 30       	cpi	r18, 0x02	; 2
    172a:	31 05       	cpc	r19, r1
    172c:	81 f0       	breq	.+32     	; 0x174e <GPIO_setupPortDirection+0x68>
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	83 30       	cpi	r24, 0x03	; 3
    1734:	91 05       	cpc	r25, r1
    1736:	81 f0       	breq	.+32     	; 0x1758 <GPIO_setupPortDirection+0x72>
    1738:	13 c0       	rjmp	.+38     	; 0x1760 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    173a:	ea e3       	ldi	r30, 0x3A	; 58
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	80 83       	st	Z, r24
    1742:	0e c0       	rjmp	.+28     	; 0x1760 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1744:	e7 e3       	ldi	r30, 0x37	; 55
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	80 83       	st	Z, r24
    174c:	09 c0       	rjmp	.+18     	; 0x1760 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    174e:	e4 e3       	ldi	r30, 0x34	; 52
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	80 83       	st	Z, r24
    1756:	04 c0       	rjmp	.+8      	; 0x1760 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1758:	e1 e3       	ldi	r30, 0x31	; 49
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	00 d0       	rcall	.+0      	; 0x1774 <GPIO_writePort+0x6>
    1774:	00 d0       	rcall	.+0      	; 0x1776 <GPIO_writePort+0x8>
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	84 30       	cpi	r24, 0x04	; 4
    1782:	90 f5       	brcc	.+100    	; 0x17e8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	3c 83       	std	Y+4, r19	; 0x04
    178c:	2b 83       	std	Y+3, r18	; 0x03
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	91 05       	cpc	r25, r1
    1796:	d1 f0       	breq	.+52     	; 0x17cc <GPIO_writePort+0x5e>
    1798:	2b 81       	ldd	r18, Y+3	; 0x03
    179a:	3c 81       	ldd	r19, Y+4	; 0x04
    179c:	22 30       	cpi	r18, 0x02	; 2
    179e:	31 05       	cpc	r19, r1
    17a0:	2c f4       	brge	.+10     	; 0x17ac <GPIO_writePort+0x3e>
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	61 f0       	breq	.+24     	; 0x17c2 <GPIO_writePort+0x54>
    17aa:	1e c0       	rjmp	.+60     	; 0x17e8 <GPIO_writePort+0x7a>
    17ac:	2b 81       	ldd	r18, Y+3	; 0x03
    17ae:	3c 81       	ldd	r19, Y+4	; 0x04
    17b0:	22 30       	cpi	r18, 0x02	; 2
    17b2:	31 05       	cpc	r19, r1
    17b4:	81 f0       	breq	.+32     	; 0x17d6 <GPIO_writePort+0x68>
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ba:	83 30       	cpi	r24, 0x03	; 3
    17bc:	91 05       	cpc	r25, r1
    17be:	81 f0       	breq	.+32     	; 0x17e0 <GPIO_writePort+0x72>
    17c0:	13 c0       	rjmp	.+38     	; 0x17e8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    17c2:	eb e3       	ldi	r30, 0x3B	; 59
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	80 83       	st	Z, r24
    17ca:	0e c0       	rjmp	.+28     	; 0x17e8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    17cc:	e8 e3       	ldi	r30, 0x38	; 56
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	80 83       	st	Z, r24
    17d4:	09 c0       	rjmp	.+18     	; 0x17e8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    17d6:	e5 e3       	ldi	r30, 0x35	; 53
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	80 83       	st	Z, r24
    17de:	04 c0       	rjmp	.+8      	; 0x17e8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    17e0:	e2 e3       	ldi	r30, 0x32	; 50
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	80 83       	st	Z, r24
			break;
		}
	}
}
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <GPIO_readPort+0x6>
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <GPIO_readPort+0x8>
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1804:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	84 30       	cpi	r24, 0x04	; 4
    180a:	90 f5       	brcc	.+100    	; 0x1870 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	3c 83       	std	Y+4, r19	; 0x04
    1814:	2b 83       	std	Y+3, r18	; 0x03
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	9c 81       	ldd	r25, Y+4	; 0x04
    181a:	81 30       	cpi	r24, 0x01	; 1
    181c:	91 05       	cpc	r25, r1
    181e:	d1 f0       	breq	.+52     	; 0x1854 <GPIO_readPort+0x5e>
    1820:	2b 81       	ldd	r18, Y+3	; 0x03
    1822:	3c 81       	ldd	r19, Y+4	; 0x04
    1824:	22 30       	cpi	r18, 0x02	; 2
    1826:	31 05       	cpc	r19, r1
    1828:	2c f4       	brge	.+10     	; 0x1834 <GPIO_readPort+0x3e>
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	9c 81       	ldd	r25, Y+4	; 0x04
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	61 f0       	breq	.+24     	; 0x184a <GPIO_readPort+0x54>
    1832:	1e c0       	rjmp	.+60     	; 0x1870 <GPIO_readPort+0x7a>
    1834:	2b 81       	ldd	r18, Y+3	; 0x03
    1836:	3c 81       	ldd	r19, Y+4	; 0x04
    1838:	22 30       	cpi	r18, 0x02	; 2
    183a:	31 05       	cpc	r19, r1
    183c:	81 f0       	breq	.+32     	; 0x185e <GPIO_readPort+0x68>
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	83 30       	cpi	r24, 0x03	; 3
    1844:	91 05       	cpc	r25, r1
    1846:	81 f0       	breq	.+32     	; 0x1868 <GPIO_readPort+0x72>
    1848:	13 c0       	rjmp	.+38     	; 0x1870 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    184a:	e9 e3       	ldi	r30, 0x39	; 57
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	0e c0       	rjmp	.+28     	; 0x1870 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1854:	e6 e3       	ldi	r30, 0x36	; 54
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	09 c0       	rjmp	.+18     	; 0x1870 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    185e:	e3 e3       	ldi	r30, 0x33	; 51
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	04 c0       	rjmp	.+8      	; 0x1870 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1868:	e0 e3       	ldi	r30, 0x30	; 48
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1870:	89 81       	ldd	r24, Y+1	; 0x01
}
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1888:	83 e0       	ldi	r24, 0x03	; 3
    188a:	64 e0       	ldi	r22, 0x04	; 4
    188c:	41 e0       	ldi	r20, 0x01	; 1
    188e:	0e 94 02 09 	call	0x1204	; 0x1204 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1892:	83 e0       	ldi	r24, 0x03	; 3
    1894:	65 e0       	ldi	r22, 0x05	; 5
    1896:	41 e0       	ldi	r20, 0x01	; 1
    1898:	0e 94 02 09 	call	0x1204	; 0x1204 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    189c:	83 e0       	ldi	r24, 0x03	; 3
    189e:	66 e0       	ldi	r22, 0x06	; 6
    18a0:	41 e0       	ldi	r20, 0x01	; 1
    18a2:	0e 94 02 09 	call	0x1204	; 0x1204 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    18a6:	82 e0       	ldi	r24, 0x02	; 2
    18a8:	6f ef       	ldi	r22, 0xFF	; 255
    18aa:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    18ae:	88 e3       	ldi	r24, 0x38	; 56
    18b0:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    18b4:	8c e0       	ldi	r24, 0x0C	; 12
    18b6:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_sendCommand>
}
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	e9 97       	sbiw	r28, 0x39	; 57
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    18dc:	83 e0       	ldi	r24, 0x03	; 3
    18de:	64 e0       	ldi	r22, 0x04	; 4
    18e0:	40 e0       	ldi	r20, 0x00	; 0
    18e2:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    18e6:	83 e0       	ldi	r24, 0x03	; 3
    18e8:	65 e0       	ldi	r22, 0x05	; 5
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 e8       	ldi	r26, 0x80	; 128
    18f6:	bf e3       	ldi	r27, 0x3F	; 63
    18f8:	8d ab       	std	Y+53, r24	; 0x35
    18fa:	9e ab       	std	Y+54, r25	; 0x36
    18fc:	af ab       	std	Y+55, r26	; 0x37
    18fe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	6d a9       	ldd	r22, Y+53	; 0x35
    1902:	7e a9       	ldd	r23, Y+54	; 0x36
    1904:	8f a9       	ldd	r24, Y+55	; 0x37
    1906:	98 ad       	ldd	r25, Y+56	; 0x38
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4a e7       	ldi	r20, 0x7A	; 122
    190e:	53 e4       	ldi	r21, 0x43	; 67
    1910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	89 ab       	std	Y+49, r24	; 0x31
    191a:	9a ab       	std	Y+50, r25	; 0x32
    191c:	ab ab       	std	Y+51, r26	; 0x33
    191e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1920:	69 a9       	ldd	r22, Y+49	; 0x31
    1922:	7a a9       	ldd	r23, Y+50	; 0x32
    1924:	8b a9       	ldd	r24, Y+51	; 0x33
    1926:	9c a9       	ldd	r25, Y+52	; 0x34
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1934:	88 23       	and	r24, r24
    1936:	2c f4       	brge	.+10     	; 0x1942 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	98 ab       	std	Y+48, r25	; 0x30
    193e:	8f a7       	std	Y+47, r24	; 0x2f
    1940:	3f c0       	rjmp	.+126    	; 0x19c0 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1942:	69 a9       	ldd	r22, Y+49	; 0x31
    1944:	7a a9       	ldd	r23, Y+50	; 0x32
    1946:	8b a9       	ldd	r24, Y+51	; 0x33
    1948:	9c a9       	ldd	r25, Y+52	; 0x34
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	4c f5       	brge	.+82     	; 0x19ac <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195a:	6d a9       	ldd	r22, Y+53	; 0x35
    195c:	7e a9       	ldd	r23, Y+54	; 0x36
    195e:	8f a9       	ldd	r24, Y+55	; 0x37
    1960:	98 ad       	ldd	r25, Y+56	; 0x38
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e2       	ldi	r20, 0x20	; 32
    1968:	51 e4       	ldi	r21, 0x41	; 65
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	98 ab       	std	Y+48, r25	; 0x30
    1980:	8f a7       	std	Y+47, r24	; 0x2f
    1982:	0f c0       	rjmp	.+30     	; 0x19a2 <LCD_sendCommand+0xdc>
    1984:	89 e1       	ldi	r24, 0x19	; 25
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	9e a7       	std	Y+46, r25	; 0x2e
    198a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    198c:	8d a5       	ldd	r24, Y+45	; 0x2d
    198e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_sendCommand+0xca>
    1994:	9e a7       	std	Y+46, r25	; 0x2e
    1996:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1998:	8f a5       	ldd	r24, Y+47	; 0x2f
    199a:	98 a9       	ldd	r25, Y+48	; 0x30
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	98 ab       	std	Y+48, r25	; 0x30
    19a0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    19a4:	98 a9       	ldd	r25, Y+48	; 0x30
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	69 f7       	brne	.-38     	; 0x1984 <LCD_sendCommand+0xbe>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ac:	69 a9       	ldd	r22, Y+49	; 0x31
    19ae:	7a a9       	ldd	r23, Y+50	; 0x32
    19b0:	8b a9       	ldd	r24, Y+51	; 0x33
    19b2:	9c a9       	ldd	r25, Y+52	; 0x34
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	98 ab       	std	Y+48, r25	; 0x30
    19be:	8f a7       	std	Y+47, r24	; 0x2f
    19c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19c2:	98 a9       	ldd	r25, Y+48	; 0x30
    19c4:	9c a7       	std	Y+44, r25	; 0x2c
    19c6:	8b a7       	std	Y+43, r24	; 0x2b
    19c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    19ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <LCD_sendCommand+0x106>
    19d0:	9c a7       	std	Y+44, r25	; 0x2c
    19d2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    19d4:	83 e0       	ldi	r24, 0x03	; 3
    19d6:	66 e0       	ldi	r22, 0x06	; 6
    19d8:	41 e0       	ldi	r20, 0x01	; 1
    19da:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	a0 e8       	ldi	r26, 0x80	; 128
    19e4:	bf e3       	ldi	r27, 0x3F	; 63
    19e6:	8f a3       	std	Y+39, r24	; 0x27
    19e8:	98 a7       	std	Y+40, r25	; 0x28
    19ea:	a9 a7       	std	Y+41, r26	; 0x29
    19ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ee:	6f a1       	ldd	r22, Y+39	; 0x27
    19f0:	78 a5       	ldd	r23, Y+40	; 0x28
    19f2:	89 a5       	ldd	r24, Y+41	; 0x29
    19f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	4a e7       	ldi	r20, 0x7A	; 122
    19fc:	53 e4       	ldi	r21, 0x43	; 67
    19fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	8b a3       	std	Y+35, r24	; 0x23
    1a08:	9c a3       	std	Y+36, r25	; 0x24
    1a0a:	ad a3       	std	Y+37, r26	; 0x25
    1a0c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a10:	7c a1       	ldd	r23, Y+36	; 0x24
    1a12:	8d a1       	ldd	r24, Y+37	; 0x25
    1a14:	9e a1       	ldd	r25, Y+38	; 0x26
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e8       	ldi	r20, 0x80	; 128
    1a1c:	5f e3       	ldi	r21, 0x3F	; 63
    1a1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a22:	88 23       	and	r24, r24
    1a24:	2c f4       	brge	.+10     	; 0x1a30 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9a a3       	std	Y+34, r25	; 0x22
    1a2c:	89 a3       	std	Y+33, r24	; 0x21
    1a2e:	3f c0       	rjmp	.+126    	; 0x1aae <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1a30:	6b a1       	ldd	r22, Y+35	; 0x23
    1a32:	7c a1       	ldd	r23, Y+36	; 0x24
    1a34:	8d a1       	ldd	r24, Y+37	; 0x25
    1a36:	9e a1       	ldd	r25, Y+38	; 0x26
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	3f ef       	ldi	r19, 0xFF	; 255
    1a3c:	4f e7       	ldi	r20, 0x7F	; 127
    1a3e:	57 e4       	ldi	r21, 0x47	; 71
    1a40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a44:	18 16       	cp	r1, r24
    1a46:	4c f5       	brge	.+82     	; 0x1a9a <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a48:	6f a1       	ldd	r22, Y+39	; 0x27
    1a4a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a4c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e2       	ldi	r20, 0x20	; 32
    1a56:	51 e4       	ldi	r21, 0x41	; 65
    1a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	bc 01       	movw	r22, r24
    1a62:	cd 01       	movw	r24, r26
    1a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	9a a3       	std	Y+34, r25	; 0x22
    1a6e:	89 a3       	std	Y+33, r24	; 0x21
    1a70:	0f c0       	rjmp	.+30     	; 0x1a90 <LCD_sendCommand+0x1ca>
    1a72:	89 e1       	ldi	r24, 0x19	; 25
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	98 a3       	std	Y+32, r25	; 0x20
    1a78:	8f 8f       	std	Y+31, r24	; 0x1f
    1a7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a7c:	98 a1       	ldd	r25, Y+32	; 0x20
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <LCD_sendCommand+0x1b8>
    1a82:	98 a3       	std	Y+32, r25	; 0x20
    1a84:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a86:	89 a1       	ldd	r24, Y+33	; 0x21
    1a88:	9a a1       	ldd	r25, Y+34	; 0x22
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	9a a3       	std	Y+34, r25	; 0x22
    1a8e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a90:	89 a1       	ldd	r24, Y+33	; 0x21
    1a92:	9a a1       	ldd	r25, Y+34	; 0x22
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	69 f7       	brne	.-38     	; 0x1a72 <LCD_sendCommand+0x1ac>
    1a98:	14 c0       	rjmp	.+40     	; 0x1ac2 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa0:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	9a a3       	std	Y+34, r25	; 0x22
    1aac:	89 a3       	std	Y+33, r24	; 0x21
    1aae:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ab4:	8d 8f       	std	Y+29, r24	; 0x1d
    1ab6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ab8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <LCD_sendCommand+0x1f4>
    1abe:	9e 8f       	std	Y+30, r25	; 0x1e
    1ac0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1ac2:	82 e0       	ldi	r24, 0x02	; 2
    1ac4:	69 ad       	ldd	r22, Y+57	; 0x39
    1ac6:	0e 94 b7 0b 	call	0x176e	; 0x176e <GPIO_writePort>
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	a0 e8       	ldi	r26, 0x80	; 128
    1ad0:	bf e3       	ldi	r27, 0x3F	; 63
    1ad2:	89 8f       	std	Y+25, r24	; 0x19
    1ad4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ad6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ad8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ada:	69 8d       	ldd	r22, Y+25	; 0x19
    1adc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ade:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	4a e7       	ldi	r20, 0x7A	; 122
    1ae8:	53 e4       	ldi	r21, 0x43	; 67
    1aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	8d 8b       	std	Y+21, r24	; 0x15
    1af4:	9e 8b       	std	Y+22, r25	; 0x16
    1af6:	af 8b       	std	Y+23, r26	; 0x17
    1af8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1afa:	6d 89       	ldd	r22, Y+21	; 0x15
    1afc:	7e 89       	ldd	r23, Y+22	; 0x16
    1afe:	8f 89       	ldd	r24, Y+23	; 0x17
    1b00:	98 8d       	ldd	r25, Y+24	; 0x18
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e8       	ldi	r20, 0x80	; 128
    1b08:	5f e3       	ldi	r21, 0x3F	; 63
    1b0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b0e:	88 23       	and	r24, r24
    1b10:	2c f4       	brge	.+10     	; 0x1b1c <LCD_sendCommand+0x256>
		__ticks = 1;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	9c 8b       	std	Y+20, r25	; 0x14
    1b18:	8b 8b       	std	Y+19, r24	; 0x13
    1b1a:	3f c0       	rjmp	.+126    	; 0x1b9a <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1b1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b20:	8f 89       	ldd	r24, Y+23	; 0x17
    1b22:	98 8d       	ldd	r25, Y+24	; 0x18
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	3f ef       	ldi	r19, 0xFF	; 255
    1b28:	4f e7       	ldi	r20, 0x7F	; 127
    1b2a:	57 e4       	ldi	r21, 0x47	; 71
    1b2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b30:	18 16       	cp	r1, r24
    1b32:	4c f5       	brge	.+82     	; 0x1b86 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b34:	69 8d       	ldd	r22, Y+25	; 0x19
    1b36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e2       	ldi	r20, 0x20	; 32
    1b42:	51 e4       	ldi	r21, 0x41	; 65
    1b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	9c 8b       	std	Y+20, r25	; 0x14
    1b5a:	8b 8b       	std	Y+19, r24	; 0x13
    1b5c:	0f c0       	rjmp	.+30     	; 0x1b7c <LCD_sendCommand+0x2b6>
    1b5e:	89 e1       	ldi	r24, 0x19	; 25
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	9a 8b       	std	Y+18, r25	; 0x12
    1b64:	89 8b       	std	Y+17, r24	; 0x11
    1b66:	89 89       	ldd	r24, Y+17	; 0x11
    1b68:	9a 89       	ldd	r25, Y+18	; 0x12
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <LCD_sendCommand+0x2a4>
    1b6e:	9a 8b       	std	Y+18, r25	; 0x12
    1b70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b72:	8b 89       	ldd	r24, Y+19	; 0x13
    1b74:	9c 89       	ldd	r25, Y+20	; 0x14
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	9c 8b       	std	Y+20, r25	; 0x14
    1b7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	69 f7       	brne	.-38     	; 0x1b5e <LCD_sendCommand+0x298>
    1b84:	14 c0       	rjmp	.+40     	; 0x1bae <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b86:	6d 89       	ldd	r22, Y+21	; 0x15
    1b88:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9c 8b       	std	Y+20, r25	; 0x14
    1b98:	8b 8b       	std	Y+19, r24	; 0x13
    1b9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9e:	98 8b       	std	Y+16, r25	; 0x10
    1ba0:	8f 87       	std	Y+15, r24	; 0x0f
    1ba2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba4:	98 89       	ldd	r25, Y+16	; 0x10
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <LCD_sendCommand+0x2e0>
    1baa:	98 8b       	std	Y+16, r25	; 0x10
    1bac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1bae:	83 e0       	ldi	r24, 0x03	; 3
    1bb0:	66 e0       	ldi	r22, 0x06	; 6
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	a0 e8       	ldi	r26, 0x80	; 128
    1bbe:	bf e3       	ldi	r27, 0x3F	; 63
    1bc0:	8b 87       	std	Y+11, r24	; 0x0b
    1bc2:	9c 87       	std	Y+12, r25	; 0x0c
    1bc4:	ad 87       	std	Y+13, r26	; 0x0d
    1bc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	4a e7       	ldi	r20, 0x7A	; 122
    1bd6:	53 e4       	ldi	r21, 0x43	; 67
    1bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	8f 83       	std	Y+7, r24	; 0x07
    1be2:	98 87       	std	Y+8, r25	; 0x08
    1be4:	a9 87       	std	Y+9, r26	; 0x09
    1be6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1be8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bea:	78 85       	ldd	r23, Y+8	; 0x08
    1bec:	89 85       	ldd	r24, Y+9	; 0x09
    1bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e8       	ldi	r20, 0x80	; 128
    1bf6:	5f e3       	ldi	r21, 0x3F	; 63
    1bf8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bfc:	88 23       	and	r24, r24
    1bfe:	2c f4       	brge	.+10     	; 0x1c0a <LCD_sendCommand+0x344>
		__ticks = 1;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	9e 83       	std	Y+6, r25	; 0x06
    1c06:	8d 83       	std	Y+5, r24	; 0x05
    1c08:	3f c0       	rjmp	.+126    	; 0x1c88 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0c:	78 85       	ldd	r23, Y+8	; 0x08
    1c0e:	89 85       	ldd	r24, Y+9	; 0x09
    1c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	3f ef       	ldi	r19, 0xFF	; 255
    1c16:	4f e7       	ldi	r20, 0x7F	; 127
    1c18:	57 e4       	ldi	r21, 0x47	; 71
    1c1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1e:	18 16       	cp	r1, r24
    1c20:	4c f5       	brge	.+82     	; 0x1c74 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e2       	ldi	r20, 0x20	; 32
    1c30:	51 e4       	ldi	r21, 0x41	; 65
    1c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	bc 01       	movw	r22, r24
    1c3c:	cd 01       	movw	r24, r26
    1c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	9e 83       	std	Y+6, r25	; 0x06
    1c48:	8d 83       	std	Y+5, r24	; 0x05
    1c4a:	0f c0       	rjmp	.+30     	; 0x1c6a <LCD_sendCommand+0x3a4>
    1c4c:	89 e1       	ldi	r24, 0x19	; 25
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	9c 83       	std	Y+4, r25	; 0x04
    1c52:	8b 83       	std	Y+3, r24	; 0x03
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <LCD_sendCommand+0x392>
    1c5c:	9c 83       	std	Y+4, r25	; 0x04
    1c5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c60:	8d 81       	ldd	r24, Y+5	; 0x05
    1c62:	9e 81       	ldd	r25, Y+6	; 0x06
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	9e 83       	std	Y+6, r25	; 0x06
    1c68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	69 f7       	brne	.-38     	; 0x1c4c <LCD_sendCommand+0x386>
    1c72:	14 c0       	rjmp	.+40     	; 0x1c9c <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c74:	6f 81       	ldd	r22, Y+7	; 0x07
    1c76:	78 85       	ldd	r23, Y+8	; 0x08
    1c78:	89 85       	ldd	r24, Y+9	; 0x09
    1c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	9e 83       	std	Y+6, r25	; 0x06
    1c86:	8d 83       	std	Y+5, r24	; 0x05
    1c88:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	9a 81       	ldd	r25, Y+2	; 0x02
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <LCD_sendCommand+0x3ce>
    1c98:	9a 83       	std	Y+2, r25	; 0x02
    1c9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1c9c:	e9 96       	adiw	r28, 0x39	; 57
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	e9 97       	sbiw	r28, 0x39	; 57
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    1cc2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1cc4:	83 e0       	ldi	r24, 0x03	; 3
    1cc6:	64 e0       	ldi	r22, 0x04	; 4
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1cce:	83 e0       	ldi	r24, 0x03	; 3
    1cd0:	65 e0       	ldi	r22, 0x05	; 5
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	a0 e8       	ldi	r26, 0x80	; 128
    1cde:	bf e3       	ldi	r27, 0x3F	; 63
    1ce0:	8d ab       	std	Y+53, r24	; 0x35
    1ce2:	9e ab       	std	Y+54, r25	; 0x36
    1ce4:	af ab       	std	Y+55, r26	; 0x37
    1ce6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	6d a9       	ldd	r22, Y+53	; 0x35
    1cea:	7e a9       	ldd	r23, Y+54	; 0x36
    1cec:	8f a9       	ldd	r24, Y+55	; 0x37
    1cee:	98 ad       	ldd	r25, Y+56	; 0x38
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a e7       	ldi	r20, 0x7A	; 122
    1cf6:	53 e4       	ldi	r21, 0x43	; 67
    1cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	89 ab       	std	Y+49, r24	; 0x31
    1d02:	9a ab       	std	Y+50, r25	; 0x32
    1d04:	ab ab       	std	Y+51, r26	; 0x33
    1d06:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d08:	69 a9       	ldd	r22, Y+49	; 0x31
    1d0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e8       	ldi	r20, 0x80	; 128
    1d16:	5f e3       	ldi	r21, 0x3F	; 63
    1d18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d1c:	88 23       	and	r24, r24
    1d1e:	2c f4       	brge	.+10     	; 0x1d2a <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	98 ab       	std	Y+48, r25	; 0x30
    1d26:	8f a7       	std	Y+47, r24	; 0x2f
    1d28:	3f c0       	rjmp	.+126    	; 0x1da8 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1d2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d30:	9c a9       	ldd	r25, Y+52	; 0x34
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	3f ef       	ldi	r19, 0xFF	; 255
    1d36:	4f e7       	ldi	r20, 0x7F	; 127
    1d38:	57 e4       	ldi	r21, 0x47	; 71
    1d3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d3e:	18 16       	cp	r1, r24
    1d40:	4c f5       	brge	.+82     	; 0x1d94 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d42:	6d a9       	ldd	r22, Y+53	; 0x35
    1d44:	7e a9       	ldd	r23, Y+54	; 0x36
    1d46:	8f a9       	ldd	r24, Y+55	; 0x37
    1d48:	98 ad       	ldd	r25, Y+56	; 0x38
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e2       	ldi	r20, 0x20	; 32
    1d50:	51 e4       	ldi	r21, 0x41	; 65
    1d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	98 ab       	std	Y+48, r25	; 0x30
    1d68:	8f a7       	std	Y+47, r24	; 0x2f
    1d6a:	0f c0       	rjmp	.+30     	; 0x1d8a <LCD_displayCharacter+0xdc>
    1d6c:	89 e1       	ldi	r24, 0x19	; 25
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	9e a7       	std	Y+46, r25	; 0x2e
    1d72:	8d a7       	std	Y+45, r24	; 0x2d
    1d74:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d76:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <LCD_displayCharacter+0xca>
    1d7c:	9e a7       	std	Y+46, r25	; 0x2e
    1d7e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d82:	98 a9       	ldd	r25, Y+48	; 0x30
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	98 ab       	std	Y+48, r25	; 0x30
    1d88:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	69 f7       	brne	.-38     	; 0x1d6c <LCD_displayCharacter+0xbe>
    1d92:	14 c0       	rjmp	.+40     	; 0x1dbc <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d94:	69 a9       	ldd	r22, Y+49	; 0x31
    1d96:	7a a9       	ldd	r23, Y+50	; 0x32
    1d98:	8b a9       	ldd	r24, Y+51	; 0x33
    1d9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	98 ab       	std	Y+48, r25	; 0x30
    1da6:	8f a7       	std	Y+47, r24	; 0x2f
    1da8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1daa:	98 a9       	ldd	r25, Y+48	; 0x30
    1dac:	9c a7       	std	Y+44, r25	; 0x2c
    1dae:	8b a7       	std	Y+43, r24	; 0x2b
    1db0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1db2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <LCD_displayCharacter+0x106>
    1db8:	9c a7       	std	Y+44, r25	; 0x2c
    1dba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1dbc:	83 e0       	ldi	r24, 0x03	; 3
    1dbe:	66 e0       	ldi	r22, 0x06	; 6
    1dc0:	41 e0       	ldi	r20, 0x01	; 1
    1dc2:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	a0 e8       	ldi	r26, 0x80	; 128
    1dcc:	bf e3       	ldi	r27, 0x3F	; 63
    1dce:	8f a3       	std	Y+39, r24	; 0x27
    1dd0:	98 a7       	std	Y+40, r25	; 0x28
    1dd2:	a9 a7       	std	Y+41, r26	; 0x29
    1dd4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd6:	6f a1       	ldd	r22, Y+39	; 0x27
    1dd8:	78 a5       	ldd	r23, Y+40	; 0x28
    1dda:	89 a5       	ldd	r24, Y+41	; 0x29
    1ddc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	4a e7       	ldi	r20, 0x7A	; 122
    1de4:	53 e4       	ldi	r21, 0x43	; 67
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	8b a3       	std	Y+35, r24	; 0x23
    1df0:	9c a3       	std	Y+36, r25	; 0x24
    1df2:	ad a3       	std	Y+37, r26	; 0x25
    1df4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1df6:	6b a1       	ldd	r22, Y+35	; 0x23
    1df8:	7c a1       	ldd	r23, Y+36	; 0x24
    1dfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1dfc:	9e a1       	ldd	r25, Y+38	; 0x26
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e8       	ldi	r20, 0x80	; 128
    1e04:	5f e3       	ldi	r21, 0x3F	; 63
    1e06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e0a:	88 23       	and	r24, r24
    1e0c:	2c f4       	brge	.+10     	; 0x1e18 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	9a a3       	std	Y+34, r25	; 0x22
    1e14:	89 a3       	std	Y+33, r24	; 0x21
    1e16:	3f c0       	rjmp	.+126    	; 0x1e96 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1e18:	6b a1       	ldd	r22, Y+35	; 0x23
    1e1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	3f ef       	ldi	r19, 0xFF	; 255
    1e24:	4f e7       	ldi	r20, 0x7F	; 127
    1e26:	57 e4       	ldi	r21, 0x47	; 71
    1e28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	4c f5       	brge	.+82     	; 0x1e82 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e30:	6f a1       	ldd	r22, Y+39	; 0x27
    1e32:	78 a5       	ldd	r23, Y+40	; 0x28
    1e34:	89 a5       	ldd	r24, Y+41	; 0x29
    1e36:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e2       	ldi	r20, 0x20	; 32
    1e3e:	51 e4       	ldi	r21, 0x41	; 65
    1e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	9a a3       	std	Y+34, r25	; 0x22
    1e56:	89 a3       	std	Y+33, r24	; 0x21
    1e58:	0f c0       	rjmp	.+30     	; 0x1e78 <LCD_displayCharacter+0x1ca>
    1e5a:	89 e1       	ldi	r24, 0x19	; 25
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	98 a3       	std	Y+32, r25	; 0x20
    1e60:	8f 8f       	std	Y+31, r24	; 0x1f
    1e62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e64:	98 a1       	ldd	r25, Y+32	; 0x20
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <LCD_displayCharacter+0x1b8>
    1e6a:	98 a3       	std	Y+32, r25	; 0x20
    1e6c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e70:	9a a1       	ldd	r25, Y+34	; 0x22
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	9a a3       	std	Y+34, r25	; 0x22
    1e76:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e78:	89 a1       	ldd	r24, Y+33	; 0x21
    1e7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	69 f7       	brne	.-38     	; 0x1e5a <LCD_displayCharacter+0x1ac>
    1e80:	14 c0       	rjmp	.+40     	; 0x1eaa <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e82:	6b a1       	ldd	r22, Y+35	; 0x23
    1e84:	7c a1       	ldd	r23, Y+36	; 0x24
    1e86:	8d a1       	ldd	r24, Y+37	; 0x25
    1e88:	9e a1       	ldd	r25, Y+38	; 0x26
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	9a a3       	std	Y+34, r25	; 0x22
    1e94:	89 a3       	std	Y+33, r24	; 0x21
    1e96:	89 a1       	ldd	r24, Y+33	; 0x21
    1e98:	9a a1       	ldd	r25, Y+34	; 0x22
    1e9a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e9c:	8d 8f       	std	Y+29, r24	; 0x1d
    1e9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ea0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <LCD_displayCharacter+0x1f4>
    1ea6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ea8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1eaa:	82 e0       	ldi	r24, 0x02	; 2
    1eac:	69 ad       	ldd	r22, Y+57	; 0x39
    1eae:	0e 94 b7 0b 	call	0x176e	; 0x176e <GPIO_writePort>
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	a0 e8       	ldi	r26, 0x80	; 128
    1eb8:	bf e3       	ldi	r27, 0x3F	; 63
    1eba:	89 8f       	std	Y+25, r24	; 0x19
    1ebc:	9a 8f       	std	Y+26, r25	; 0x1a
    1ebe:	ab 8f       	std	Y+27, r26	; 0x1b
    1ec0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ec4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ec6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	4a e7       	ldi	r20, 0x7A	; 122
    1ed0:	53 e4       	ldi	r21, 0x43	; 67
    1ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	8d 8b       	std	Y+21, r24	; 0x15
    1edc:	9e 8b       	std	Y+22, r25	; 0x16
    1ede:	af 8b       	std	Y+23, r26	; 0x17
    1ee0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ee2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e8       	ldi	r20, 0x80	; 128
    1ef0:	5f e3       	ldi	r21, 0x3F	; 63
    1ef2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef6:	88 23       	and	r24, r24
    1ef8:	2c f4       	brge	.+10     	; 0x1f04 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	9c 8b       	std	Y+20, r25	; 0x14
    1f00:	8b 8b       	std	Y+19, r24	; 0x13
    1f02:	3f c0       	rjmp	.+126    	; 0x1f82 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1f04:	6d 89       	ldd	r22, Y+21	; 0x15
    1f06:	7e 89       	ldd	r23, Y+22	; 0x16
    1f08:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	3f ef       	ldi	r19, 0xFF	; 255
    1f10:	4f e7       	ldi	r20, 0x7F	; 127
    1f12:	57 e4       	ldi	r21, 0x47	; 71
    1f14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f18:	18 16       	cp	r1, r24
    1f1a:	4c f5       	brge	.+82     	; 0x1f6e <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e2       	ldi	r20, 0x20	; 32
    1f2a:	51 e4       	ldi	r21, 0x41	; 65
    1f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	bc 01       	movw	r22, r24
    1f36:	cd 01       	movw	r24, r26
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	9c 8b       	std	Y+20, r25	; 0x14
    1f42:	8b 8b       	std	Y+19, r24	; 0x13
    1f44:	0f c0       	rjmp	.+30     	; 0x1f64 <LCD_displayCharacter+0x2b6>
    1f46:	89 e1       	ldi	r24, 0x19	; 25
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9a 8b       	std	Y+18, r25	; 0x12
    1f4c:	89 8b       	std	Y+17, r24	; 0x11
    1f4e:	89 89       	ldd	r24, Y+17	; 0x11
    1f50:	9a 89       	ldd	r25, Y+18	; 0x12
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <LCD_displayCharacter+0x2a4>
    1f56:	9a 8b       	std	Y+18, r25	; 0x12
    1f58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	9c 8b       	std	Y+20, r25	; 0x14
    1f62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f64:	8b 89       	ldd	r24, Y+19	; 0x13
    1f66:	9c 89       	ldd	r25, Y+20	; 0x14
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	69 f7       	brne	.-38     	; 0x1f46 <LCD_displayCharacter+0x298>
    1f6c:	14 c0       	rjmp	.+40     	; 0x1f96 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f70:	7e 89       	ldd	r23, Y+22	; 0x16
    1f72:	8f 89       	ldd	r24, Y+23	; 0x17
    1f74:	98 8d       	ldd	r25, Y+24	; 0x18
    1f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	9c 8b       	std	Y+20, r25	; 0x14
    1f80:	8b 8b       	std	Y+19, r24	; 0x13
    1f82:	8b 89       	ldd	r24, Y+19	; 0x13
    1f84:	9c 89       	ldd	r25, Y+20	; 0x14
    1f86:	98 8b       	std	Y+16, r25	; 0x10
    1f88:	8f 87       	std	Y+15, r24	; 0x0f
    1f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f8c:	98 89       	ldd	r25, Y+16	; 0x10
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	f1 f7       	brne	.-4      	; 0x1f8e <LCD_displayCharacter+0x2e0>
    1f92:	98 8b       	std	Y+16, r25	; 0x10
    1f94:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f96:	83 e0       	ldi	r24, 0x03	; 3
    1f98:	66 e0       	ldi	r22, 0x06	; 6
    1f9a:	40 e0       	ldi	r20, 0x00	; 0
    1f9c:	0e 94 ed 09 	call	0x13da	; 0x13da <GPIO_writePin>
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	a0 e8       	ldi	r26, 0x80	; 128
    1fa6:	bf e3       	ldi	r27, 0x3F	; 63
    1fa8:	8b 87       	std	Y+11, r24	; 0x0b
    1faa:	9c 87       	std	Y+12, r25	; 0x0c
    1fac:	ad 87       	std	Y+13, r26	; 0x0d
    1fae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	4a e7       	ldi	r20, 0x7A	; 122
    1fbe:	53 e4       	ldi	r21, 0x43	; 67
    1fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	8f 83       	std	Y+7, r24	; 0x07
    1fca:	98 87       	std	Y+8, r25	; 0x08
    1fcc:	a9 87       	std	Y+9, r26	; 0x09
    1fce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd2:	78 85       	ldd	r23, Y+8	; 0x08
    1fd4:	89 85       	ldd	r24, Y+9	; 0x09
    1fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	5f e3       	ldi	r21, 0x3F	; 63
    1fe0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe4:	88 23       	and	r24, r24
    1fe6:	2c f4       	brge	.+10     	; 0x1ff2 <LCD_displayCharacter+0x344>
		__ticks = 1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9e 83       	std	Y+6, r25	; 0x06
    1fee:	8d 83       	std	Y+5, r24	; 0x05
    1ff0:	3f c0       	rjmp	.+126    	; 0x2070 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff4:	78 85       	ldd	r23, Y+8	; 0x08
    1ff6:	89 85       	ldd	r24, Y+9	; 0x09
    1ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	3f ef       	ldi	r19, 0xFF	; 255
    1ffe:	4f e7       	ldi	r20, 0x7F	; 127
    2000:	57 e4       	ldi	r21, 0x47	; 71
    2002:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2006:	18 16       	cp	r1, r24
    2008:	4c f5       	brge	.+82     	; 0x205c <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200a:	6b 85       	ldd	r22, Y+11	; 0x0b
    200c:	7c 85       	ldd	r23, Y+12	; 0x0c
    200e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2010:	9e 85       	ldd	r25, Y+14	; 0x0e
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e2       	ldi	r20, 0x20	; 32
    2018:	51 e4       	ldi	r21, 0x41	; 65
    201a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	bc 01       	movw	r22, r24
    2024:	cd 01       	movw	r24, r26
    2026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	9e 83       	std	Y+6, r25	; 0x06
    2030:	8d 83       	std	Y+5, r24	; 0x05
    2032:	0f c0       	rjmp	.+30     	; 0x2052 <LCD_displayCharacter+0x3a4>
    2034:	89 e1       	ldi	r24, 0x19	; 25
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9c 83       	std	Y+4, r25	; 0x04
    203a:	8b 83       	std	Y+3, r24	; 0x03
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	9c 81       	ldd	r25, Y+4	; 0x04
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <LCD_displayCharacter+0x392>
    2044:	9c 83       	std	Y+4, r25	; 0x04
    2046:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	9e 83       	std	Y+6, r25	; 0x06
    2050:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2052:	8d 81       	ldd	r24, Y+5	; 0x05
    2054:	9e 81       	ldd	r25, Y+6	; 0x06
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	69 f7       	brne	.-38     	; 0x2034 <LCD_displayCharacter+0x386>
    205a:	14 c0       	rjmp	.+40     	; 0x2084 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205c:	6f 81       	ldd	r22, Y+7	; 0x07
    205e:	78 85       	ldd	r23, Y+8	; 0x08
    2060:	89 85       	ldd	r24, Y+9	; 0x09
    2062:	9a 85       	ldd	r25, Y+10	; 0x0a
    2064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	9e 83       	std	Y+6, r25	; 0x06
    206e:	8d 83       	std	Y+5, r24	; 0x05
    2070:	8d 81       	ldd	r24, Y+5	; 0x05
    2072:	9e 81       	ldd	r25, Y+6	; 0x06
    2074:	9a 83       	std	Y+2, r25	; 0x02
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	9a 81       	ldd	r25, Y+2	; 0x02
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <LCD_displayCharacter+0x3ce>
    2080:	9a 83       	std	Y+2, r25	; 0x02
    2082:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2084:	e9 96       	adiw	r28, 0x39	; 57
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	00 d0       	rcall	.+0      	; 0x209c <LCD_displayString+0x6>
    209c:	0f 92       	push	r0
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	9b 83       	std	Y+3, r25	; 0x03
    20a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    20a6:	19 82       	std	Y+1, r1	; 0x01
    20a8:	0e c0       	rjmp	.+28     	; 0x20c6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	9b 81       	ldd	r25, Y+3	; 0x03
    20b4:	fc 01       	movw	r30, r24
    20b6:	e2 0f       	add	r30, r18
    20b8:	f3 1f       	adc	r31, r19
    20ba:	80 81       	ld	r24, Z
    20bc:	0e 94 57 0e 	call	0x1cae	; 0x1cae <LCD_displayCharacter>
		i++;
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	8f 5f       	subi	r24, 0xFF	; 255
    20c4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	9b 81       	ldd	r25, Y+3	; 0x03
    20d0:	fc 01       	movw	r30, r24
    20d2:	e2 0f       	add	r30, r18
    20d4:	f3 1f       	adc	r31, r19
    20d6:	80 81       	ld	r24, Z
    20d8:	88 23       	and	r24, r24
    20da:	39 f7       	brne	.-50     	; 0x20aa <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <LCD_moveCursor+0x6>
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <LCD_moveCursor+0x8>
    20f0:	0f 92       	push	r0
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	8a 83       	std	Y+2, r24	; 0x02
    20f8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	3d 83       	std	Y+5, r19	; 0x05
    2102:	2c 83       	std	Y+4, r18	; 0x04
    2104:	8c 81       	ldd	r24, Y+4	; 0x04
    2106:	9d 81       	ldd	r25, Y+5	; 0x05
    2108:	81 30       	cpi	r24, 0x01	; 1
    210a:	91 05       	cpc	r25, r1
    210c:	c1 f0       	breq	.+48     	; 0x213e <LCD_moveCursor+0x56>
    210e:	2c 81       	ldd	r18, Y+4	; 0x04
    2110:	3d 81       	ldd	r19, Y+5	; 0x05
    2112:	22 30       	cpi	r18, 0x02	; 2
    2114:	31 05       	cpc	r19, r1
    2116:	2c f4       	brge	.+10     	; 0x2122 <LCD_moveCursor+0x3a>
    2118:	8c 81       	ldd	r24, Y+4	; 0x04
    211a:	9d 81       	ldd	r25, Y+5	; 0x05
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	61 f0       	breq	.+24     	; 0x2138 <LCD_moveCursor+0x50>
    2120:	19 c0       	rjmp	.+50     	; 0x2154 <LCD_moveCursor+0x6c>
    2122:	2c 81       	ldd	r18, Y+4	; 0x04
    2124:	3d 81       	ldd	r19, Y+5	; 0x05
    2126:	22 30       	cpi	r18, 0x02	; 2
    2128:	31 05       	cpc	r19, r1
    212a:	69 f0       	breq	.+26     	; 0x2146 <LCD_moveCursor+0x5e>
    212c:	8c 81       	ldd	r24, Y+4	; 0x04
    212e:	9d 81       	ldd	r25, Y+5	; 0x05
    2130:	83 30       	cpi	r24, 0x03	; 3
    2132:	91 05       	cpc	r25, r1
    2134:	61 f0       	breq	.+24     	; 0x214e <LCD_moveCursor+0x66>
    2136:	0e c0       	rjmp	.+28     	; 0x2154 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	89 83       	std	Y+1, r24	; 0x01
    213c:	0b c0       	rjmp	.+22     	; 0x2154 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	80 5c       	subi	r24, 0xC0	; 192
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	07 c0       	rjmp	.+14     	; 0x2154 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	80 5f       	subi	r24, 0xF0	; 240
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	03 c0       	rjmp	.+6      	; 0x2154 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	80 5b       	subi	r24, 0xB0	; 176
    2152:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	80 68       	ori	r24, 0x80	; 128
    2158:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_sendCommand>
}
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	00 d0       	rcall	.+0      	; 0x2172 <LCD_displayStringRowColumn+0x6>
    2172:	00 d0       	rcall	.+0      	; 0x2174 <LCD_displayStringRowColumn+0x8>
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	6a 83       	std	Y+2, r22	; 0x02
    217c:	5c 83       	std	Y+4, r21	; 0x04
    217e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	6a 81       	ldd	r22, Y+2	; 0x02
    2184:	0e 94 74 10 	call	0x20e8	; 0x20e8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	9c 81       	ldd	r25, Y+4	; 0x04
    218c:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_displayString>
}
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	62 97       	sbiw	r28, 0x12	; 18
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	9a 8b       	std	Y+18, r25	; 0x12
    21b4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    21b6:	89 89       	ldd	r24, Y+17	; 0x11
    21b8:	9a 89       	ldd	r25, Y+18	; 0x12
    21ba:	9e 01       	movw	r18, r28
    21bc:	2f 5f       	subi	r18, 0xFF	; 255
    21be:	3f 4f       	sbci	r19, 0xFF	; 255
    21c0:	b9 01       	movw	r22, r18
    21c2:	4a e0       	ldi	r20, 0x0A	; 10
    21c4:	50 e0       	ldi	r21, 0x00	; 0
    21c6:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <itoa>
   LCD_displayString(buff); /* Display the string */
    21ca:	ce 01       	movw	r24, r28
    21cc:	01 96       	adiw	r24, 0x01	; 1
    21ce:	0e 94 4b 10 	call	0x2096	; 0x2096 <LCD_displayString>
}
    21d2:	62 96       	adiw	r28, 0x12	; 18
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	f8 94       	cli
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	cd bf       	out	0x3d, r28	; 61
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_sendCommand>
}
    21f2:	cf 91       	pop	r28
    21f4:	df 91       	pop	r29
    21f6:	08 95       	ret

000021f8 <PWM_Timer0_Init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void PWM_Timer0_Init(unsigned char set_duty_cycle)
{
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	0f 92       	push	r0
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    2204:	e2 e5       	ldi	r30, 0x52	; 82
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle*(256/100); // Set Compare Value
    220a:	ec e5       	ldi	r30, 0x5C	; 92
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	80 83       	st	Z, r24

	SET_BIT(motor_pwm_port,motor_pwm_Pin); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    221a:	a8 e3       	ldi	r26, 0x38	; 56
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e8 e3       	ldi	r30, 0x38	; 56
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	88 60       	ori	r24, 0x08	; 8
    2226:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2228:	e3 e5       	ldi	r30, 0x53	; 83
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	8a e6       	ldi	r24, 0x6A	; 106
    222e:	80 83       	st	Z, r24
}
    2230:	0f 90       	pop	r0
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <Timer0_Init_Normal_Mode>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer0_Init_Normal_Mode(const Timer_config * Config_Ptr)
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	00 d0       	rcall	.+0      	; 0x223e <Timer0_Init_Normal_Mode+0x6>
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	9a 83       	std	Y+2, r25	; 0x02
    2244:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Config_Ptr->initialValue; //Set Timer initial value to 0
    2246:	a2 e5       	ldi	r26, 0x52	; 82
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e9 81       	ldd	r30, Y+1	; 0x01
    224c:	fa 81       	ldd	r31, Y+2	; 0x02
    224e:	85 81       	ldd	r24, Z+5	; 0x05
    2250:	96 81       	ldd	r25, Z+6	; 0x06
    2252:	8c 93       	st	X, r24
	TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    2254:	a9 e5       	ldi	r26, 0x59	; 89
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e9 e5       	ldi	r30, 0x59	; 89
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	81 60       	ori	r24, 0x01	; 1
    2260:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1<<FOC0);
    2262:	e3 e5       	ldi	r30, 0x53	; 83
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 e8       	ldi	r24, 0x80	; 128
    2268:	80 83       	st	Z, r24
	TCCR0 = (TCCR0 & 0xf8) | (Config_Ptr->prescaler);
    226a:	a3 e5       	ldi	r26, 0x53	; 83
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e3 e5       	ldi	r30, 0x53	; 83
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	98 2f       	mov	r25, r24
    2276:	98 7f       	andi	r25, 0xF8	; 248
    2278:	e9 81       	ldd	r30, Y+1	; 0x01
    227a:	fa 81       	ldd	r31, Y+2	; 0x02
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	89 2b       	or	r24, r25
    2280:	8c 93       	st	X, r24
}
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <Timer1_Init_Normal_Mode>:
void Timer1_Init_Normal_Mode(const Timer_config * Config_Ptr){
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	00 d0       	rcall	.+0      	; 0x2292 <Timer1_Init_Normal_Mode+0x6>
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	9a 83       	std	Y+2, r25	; 0x02
    2298:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initialValue; //Set Timer initial value to 0
    229a:	ac e4       	ldi	r26, 0x4C	; 76
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e9 81       	ldd	r30, Y+1	; 0x01
    22a0:	fa 81       	ldd	r31, Y+2	; 0x02
    22a2:	85 81       	ldd	r24, Z+5	; 0x05
    22a4:	96 81       	ldd	r25, Z+6	; 0x06
    22a6:	11 96       	adiw	r26, 0x01	; 1
    22a8:	9c 93       	st	X, r25
    22aa:	8e 93       	st	-X, r24
	TIMSK |= (1<<TOIE1); // Enable Timer1 Overflow Interrupt
    22ac:	a9 e5       	ldi	r26, 0x59	; 89
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e9 e5       	ldi	r30, 0x59	; 89
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	84 60       	ori	r24, 0x04	; 4
    22b8:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR1A |= (1<<FOC1A) ;  //not PMW
    22ba:	af e4       	ldi	r26, 0x4F	; 79
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	ef e4       	ldi	r30, 0x4F	; 79
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	88 60       	ori	r24, 0x08	; 8
    22c6:	8c 93       	st	X, r24
	TCCR1A = (TCCR1A & 0xf8) | (Config_Ptr->prescaler);
    22c8:	af e4       	ldi	r26, 0x4F	; 79
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	ef e4       	ldi	r30, 0x4F	; 79
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	98 2f       	mov	r25, r24
    22d4:	98 7f       	andi	r25, 0xF8	; 248
    22d6:	e9 81       	ldd	r30, Y+1	; 0x01
    22d8:	fa 81       	ldd	r31, Y+2	; 0x02
    22da:	82 81       	ldd	r24, Z+2	; 0x02
    22dc:	89 2b       	or	r24, r25
    22de:	8c 93       	st	X, r24
}
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret

000022ea <Timer2_Init_Normal_Mode>:
void Timer2_Init_Normal_Mode(const Timer_config * Config_Ptr){
    22ea:	df 93       	push	r29
    22ec:	cf 93       	push	r28
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <Timer2_Init_Normal_Mode+0x6>
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	9a 83       	std	Y+2, r25	; 0x02
    22f6:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Config_Ptr->initialValue; //Set Timer initial value to 0
    22f8:	a4 e4       	ldi	r26, 0x44	; 68
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	e9 81       	ldd	r30, Y+1	; 0x01
    22fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2300:	85 81       	ldd	r24, Z+5	; 0x05
    2302:	96 81       	ldd	r25, Z+6	; 0x06
    2304:	8c 93       	st	X, r24
	TIMSK |= (1<<TOIE2); // Enable Timer0 Overflow Interrupt
    2306:	a9 e5       	ldi	r26, 0x59	; 89
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e9 e5       	ldi	r30, 0x59	; 89
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	80 64       	ori	r24, 0x40	; 64
    2312:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR2 = (1<<FOC2);
    2314:	e5 e4       	ldi	r30, 0x45	; 69
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 e8       	ldi	r24, 0x80	; 128
    231a:	80 83       	st	Z, r24
	TCCR2 = (TCCR2 & 0xf8) | (Config_Ptr->prescaler);
    231c:	a5 e4       	ldi	r26, 0x45	; 69
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	e5 e4       	ldi	r30, 0x45	; 69
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	98 2f       	mov	r25, r24
    2328:	98 7f       	andi	r25, 0xF8	; 248
    232a:	e9 81       	ldd	r30, Y+1	; 0x01
    232c:	fa 81       	ldd	r31, Y+2	; 0x02
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	89 2b       	or	r24, r25
    2332:	8c 93       	st	X, r24
}
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	cf 91       	pop	r28
    233a:	df 91       	pop	r29
    233c:	08 95       	ret

0000233e <Timer0_Init_Compare_Mode>:

void Timer0_Init_Compare_Mode(const Timer_config * Config_Ptr){
    233e:	df 93       	push	r29
    2340:	cf 93       	push	r28
    2342:	00 d0       	rcall	.+0      	; 0x2344 <Timer0_Init_Compare_Mode+0x6>
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	9a 83       	std	Y+2, r25	; 0x02
    234a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Config_Ptr->initialValue;    // Set Timer initial value to 0
    234c:	a2 e5       	ldi	r26, 0x52	; 82
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e9 81       	ldd	r30, Y+1	; 0x01
    2352:	fa 81       	ldd	r31, Y+2	; 0x02
    2354:	85 81       	ldd	r24, Z+5	; 0x05
    2356:	96 81       	ldd	r25, Z+6	; 0x06
    2358:	8c 93       	st	X, r24
	OCR0  = Config_Ptr->compareValue; // Set Compare Value
    235a:	ac e5       	ldi	r26, 0x5C	; 92
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	e9 81       	ldd	r30, Y+1	; 0x01
    2360:	fa 81       	ldd	r31, Y+2	; 0x02
    2362:	83 81       	ldd	r24, Z+3	; 0x03
    2364:	94 81       	ldd	r25, Z+4	; 0x04
    2366:	8c 93       	st	X, r24
	TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    2368:	a9 e5       	ldi	r26, 0x59	; 89
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	e9 e5       	ldi	r30, 0x59	; 89
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	82 60       	ori	r24, 0x02	; 2
    2374:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 in this example so COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1<<FOC0) | (1<<WGM01);
    2376:	e3 e5       	ldi	r30, 0x53	; 83
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	88 e8       	ldi	r24, 0x88	; 136
    237c:	80 83       	st	Z, r24
	TCCR0 = (TCCR0 & 0xf8)| (Config_Ptr->prescaler);
    237e:	a3 e5       	ldi	r26, 0x53	; 83
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e3 e5       	ldi	r30, 0x53	; 83
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	98 2f       	mov	r25, r24
    238a:	98 7f       	andi	r25, 0xF8	; 248
    238c:	e9 81       	ldd	r30, Y+1	; 0x01
    238e:	fa 81       	ldd	r31, Y+2	; 0x02
    2390:	82 81       	ldd	r24, Z+2	; 0x02
    2392:	89 2b       	or	r24, r25
    2394:	8c 93       	st	X, r24
}
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <Timer1A_Init_Compare_Mode>:
void Timer1A_Init_Compare_Mode(const Timer_config * Config_Ptr){
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <Timer1A_Init_Compare_Mode+0x6>
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	9a 83       	std	Y+2, r25	; 0x02
    23ac:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 =Config_Ptr->initialValue;
    23ae:	ac e4       	ldi	r26, 0x4C	; 76
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	e9 81       	ldd	r30, Y+1	; 0x01
    23b4:	fa 81       	ldd	r31, Y+2	; 0x02
    23b6:	85 81       	ldd	r24, Z+5	; 0x05
    23b8:	96 81       	ldd	r25, Z+6	; 0x06
    23ba:	11 96       	adiw	r26, 0x01	; 1
    23bc:	9c 93       	st	X, r25
    23be:	8e 93       	st	-X, r24
	OCR1A = Config_Ptr->compareValue;            //capture value
    23c0:	aa e4       	ldi	r26, 0x4A	; 74
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e9 81       	ldd	r30, Y+1	; 0x01
    23c6:	fa 81       	ldd	r31, Y+2	; 0x02
    23c8:	83 81       	ldd	r24, Z+3	; 0x03
    23ca:	94 81       	ldd	r25, Z+4	; 0x04
    23cc:	11 96       	adiw	r26, 0x01	; 1
    23ce:	9c 93       	st	X, r25
    23d0:	8e 93       	st	-X, r24
	TIMSK |= (1<<OCIE1A);    //INT enable
    23d2:	a9 e5       	ldi	r26, 0x59	; 89
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	e9 e5       	ldi	r30, 0x59	; 89
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	80 61       	ori	r24, 0x10	; 16
    23de:	8c 93       	st	X, r24
	TCCR1B |= (1<<WGM12); // Compare mode
    23e0:	ae e4       	ldi	r26, 0x4E	; 78
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	ee e4       	ldi	r30, 0x4E	; 78
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	88 60       	ori	r24, 0x08	; 8
    23ec:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xf8)| (Config_Ptr->prescaler);
    23ee:	ae e4       	ldi	r26, 0x4E	; 78
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	ee e4       	ldi	r30, 0x4E	; 78
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	98 2f       	mov	r25, r24
    23fa:	98 7f       	andi	r25, 0xF8	; 248
    23fc:	e9 81       	ldd	r30, Y+1	; 0x01
    23fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	89 2b       	or	r24, r25
    2404:	8c 93       	st	X, r24
	TCCR1A|=(1<<FOC1A) ;  //not PMW
    2406:	af e4       	ldi	r26, 0x4F	; 79
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	ef e4       	ldi	r30, 0x4F	; 79
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	88 60       	ori	r24, 0x08	; 8
    2412:	8c 93       	st	X, r24
}
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	cf 91       	pop	r28
    241a:	df 91       	pop	r29
    241c:	08 95       	ret

0000241e <Timer2_Init_Compare_Mode>:
void Timer2_Init_Compare_Mode(const Timer_config * Config_Ptr){
    241e:	df 93       	push	r29
    2420:	cf 93       	push	r28
    2422:	00 d0       	rcall	.+0      	; 0x2424 <Timer2_Init_Compare_Mode+0x6>
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Config_Ptr->initialValue;    // Set Timer initial value to 0
    242c:	a4 e4       	ldi	r26, 0x44	; 68
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	e9 81       	ldd	r30, Y+1	; 0x01
    2432:	fa 81       	ldd	r31, Y+2	; 0x02
    2434:	85 81       	ldd	r24, Z+5	; 0x05
    2436:	96 81       	ldd	r25, Z+6	; 0x06
    2438:	8c 93       	st	X, r24
	OCR2  = Config_Ptr->compareValue; // Set Compare Value
    243a:	a3 e4       	ldi	r26, 0x43	; 67
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	e9 81       	ldd	r30, Y+1	; 0x01
    2440:	fa 81       	ldd	r31, Y+2	; 0x02
    2442:	83 81       	ldd	r24, Z+3	; 0x03
    2444:	94 81       	ldd	r25, Z+4	; 0x04
    2446:	8c 93       	st	X, r24
	TIMSK |= (1<<OCIE2); // Enable Timer0 Compare Interrupt
    2448:	a9 e5       	ldi	r26, 0x59	; 89
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	e9 e5       	ldi	r30, 0x59	; 89
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	80 68       	ori	r24, 0x80	; 128
    2454:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 in this example so COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR2 = (1<<FOC2) | (1<<WGM21);
    2456:	e5 e4       	ldi	r30, 0x45	; 69
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	88 e8       	ldi	r24, 0x88	; 136
    245c:	80 83       	st	Z, r24
	TCCR2 = (TCCR2 & 0xf8)| (Config_Ptr->prescaler);
    245e:	a5 e4       	ldi	r26, 0x45	; 69
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	e5 e4       	ldi	r30, 0x45	; 69
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	98 2f       	mov	r25, r24
    246a:	98 7f       	andi	r25, 0xF8	; 248
    246c:	e9 81       	ldd	r30, Y+1	; 0x01
    246e:	fa 81       	ldd	r31, Y+2	; 0x02
    2470:	82 81       	ldd	r24, Z+2	; 0x02
    2472:	89 2b       	or	r24, r25
    2474:	8c 93       	st	X, r24
}
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	08 95       	ret

00002480 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
    2480:	1f 92       	push	r1
    2482:	0f 92       	push	r0
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	0f 92       	push	r0
    2488:	11 24       	eor	r1, r1
    248a:	2f 93       	push	r18
    248c:	3f 93       	push	r19
    248e:	4f 93       	push	r20
    2490:	5f 93       	push	r21
    2492:	6f 93       	push	r22
    2494:	7f 93       	push	r23
    2496:	8f 93       	push	r24
    2498:	9f 93       	push	r25
    249a:	af 93       	push	r26
    249c:	bf 93       	push	r27
    249e:	ef 93       	push	r30
    24a0:	ff 93       	push	r31
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
	(*timer0_callback_ptr)();
    24aa:	e0 91 6f 00 	lds	r30, 0x006F
    24ae:	f0 91 70 00 	lds	r31, 0x0070
    24b2:	09 95       	icall
}
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	ff 91       	pop	r31
    24ba:	ef 91       	pop	r30
    24bc:	bf 91       	pop	r27
    24be:	af 91       	pop	r26
    24c0:	9f 91       	pop	r25
    24c2:	8f 91       	pop	r24
    24c4:	7f 91       	pop	r23
    24c6:	6f 91       	pop	r22
    24c8:	5f 91       	pop	r21
    24ca:	4f 91       	pop	r20
    24cc:	3f 91       	pop	r19
    24ce:	2f 91       	pop	r18
    24d0:	0f 90       	pop	r0
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	0f 90       	pop	r0
    24d6:	1f 90       	pop	r1
    24d8:	18 95       	reti

000024da <__vector_8>:
ISR(TIMER1_OVF_vect)
{
    24da:	1f 92       	push	r1
    24dc:	0f 92       	push	r0
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	0f 92       	push	r0
    24e2:	11 24       	eor	r1, r1
    24e4:	2f 93       	push	r18
    24e6:	3f 93       	push	r19
    24e8:	4f 93       	push	r20
    24ea:	5f 93       	push	r21
    24ec:	6f 93       	push	r22
    24ee:	7f 93       	push	r23
    24f0:	8f 93       	push	r24
    24f2:	9f 93       	push	r25
    24f4:	af 93       	push	r26
    24f6:	bf 93       	push	r27
    24f8:	ef 93       	push	r30
    24fa:	ff 93       	push	r31
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
	timer1A_callback_ptr();
    2504:	e0 91 71 00 	lds	r30, 0x0071
    2508:	f0 91 72 00 	lds	r31, 0x0072
    250c:	09 95       	icall
}
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	ff 91       	pop	r31
    2514:	ef 91       	pop	r30
    2516:	bf 91       	pop	r27
    2518:	af 91       	pop	r26
    251a:	9f 91       	pop	r25
    251c:	8f 91       	pop	r24
    251e:	7f 91       	pop	r23
    2520:	6f 91       	pop	r22
    2522:	5f 91       	pop	r21
    2524:	4f 91       	pop	r20
    2526:	3f 91       	pop	r19
    2528:	2f 91       	pop	r18
    252a:	0f 90       	pop	r0
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	0f 90       	pop	r0
    2530:	1f 90       	pop	r1
    2532:	18 95       	reti

00002534 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    2534:	1f 92       	push	r1
    2536:	0f 92       	push	r0
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	0f 92       	push	r0
    253c:	11 24       	eor	r1, r1
    253e:	2f 93       	push	r18
    2540:	3f 93       	push	r19
    2542:	4f 93       	push	r20
    2544:	5f 93       	push	r21
    2546:	6f 93       	push	r22
    2548:	7f 93       	push	r23
    254a:	8f 93       	push	r24
    254c:	9f 93       	push	r25
    254e:	af 93       	push	r26
    2550:	bf 93       	push	r27
    2552:	ef 93       	push	r30
    2554:	ff 93       	push	r31
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
	timer2_callback_ptr();
    255e:	e0 91 75 00 	lds	r30, 0x0075
    2562:	f0 91 76 00 	lds	r31, 0x0076
    2566:	09 95       	icall
}
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	ff 91       	pop	r31
    256e:	ef 91       	pop	r30
    2570:	bf 91       	pop	r27
    2572:	af 91       	pop	r26
    2574:	9f 91       	pop	r25
    2576:	8f 91       	pop	r24
    2578:	7f 91       	pop	r23
    257a:	6f 91       	pop	r22
    257c:	5f 91       	pop	r21
    257e:	4f 91       	pop	r20
    2580:	3f 91       	pop	r19
    2582:	2f 91       	pop	r18
    2584:	0f 90       	pop	r0
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	0f 90       	pop	r0
    258a:	1f 90       	pop	r1
    258c:	18 95       	reti

0000258e <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    258e:	1f 92       	push	r1
    2590:	0f 92       	push	r0
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	0f 92       	push	r0
    2596:	11 24       	eor	r1, r1
    2598:	2f 93       	push	r18
    259a:	3f 93       	push	r19
    259c:	4f 93       	push	r20
    259e:	5f 93       	push	r21
    25a0:	6f 93       	push	r22
    25a2:	7f 93       	push	r23
    25a4:	8f 93       	push	r24
    25a6:	9f 93       	push	r25
    25a8:	af 93       	push	r26
    25aa:	bf 93       	push	r27
    25ac:	ef 93       	push	r30
    25ae:	ff 93       	push	r31
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
	timer0_callback_ptr();
    25b8:	e0 91 6f 00 	lds	r30, 0x006F
    25bc:	f0 91 70 00 	lds	r31, 0x0070
    25c0:	09 95       	icall
}
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	ff 91       	pop	r31
    25c8:	ef 91       	pop	r30
    25ca:	bf 91       	pop	r27
    25cc:	af 91       	pop	r26
    25ce:	9f 91       	pop	r25
    25d0:	8f 91       	pop	r24
    25d2:	7f 91       	pop	r23
    25d4:	6f 91       	pop	r22
    25d6:	5f 91       	pop	r21
    25d8:	4f 91       	pop	r20
    25da:	3f 91       	pop	r19
    25dc:	2f 91       	pop	r18
    25de:	0f 90       	pop	r0
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	0f 90       	pop	r0
    25e4:	1f 90       	pop	r1
    25e6:	18 95       	reti

000025e8 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    25e8:	1f 92       	push	r1
    25ea:	0f 92       	push	r0
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	0f 92       	push	r0
    25f0:	11 24       	eor	r1, r1
    25f2:	2f 93       	push	r18
    25f4:	3f 93       	push	r19
    25f6:	4f 93       	push	r20
    25f8:	5f 93       	push	r21
    25fa:	6f 93       	push	r22
    25fc:	7f 93       	push	r23
    25fe:	8f 93       	push	r24
    2600:	9f 93       	push	r25
    2602:	af 93       	push	r26
    2604:	bf 93       	push	r27
    2606:	ef 93       	push	r30
    2608:	ff 93       	push	r31
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
	timer1A_callback_ptr();
    2612:	e0 91 71 00 	lds	r30, 0x0071
    2616:	f0 91 72 00 	lds	r31, 0x0072
    261a:	09 95       	icall
}
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	ff 91       	pop	r31
    2622:	ef 91       	pop	r30
    2624:	bf 91       	pop	r27
    2626:	af 91       	pop	r26
    2628:	9f 91       	pop	r25
    262a:	8f 91       	pop	r24
    262c:	7f 91       	pop	r23
    262e:	6f 91       	pop	r22
    2630:	5f 91       	pop	r21
    2632:	4f 91       	pop	r20
    2634:	3f 91       	pop	r19
    2636:	2f 91       	pop	r18
    2638:	0f 90       	pop	r0
    263a:	0f be       	out	0x3f, r0	; 63
    263c:	0f 90       	pop	r0
    263e:	1f 90       	pop	r1
    2640:	18 95       	reti

00002642 <__vector_7>:
ISR(TIMER1_COMPB_vect)
{
    2642:	1f 92       	push	r1
    2644:	0f 92       	push	r0
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	0f 92       	push	r0
    264a:	11 24       	eor	r1, r1
    264c:	2f 93       	push	r18
    264e:	3f 93       	push	r19
    2650:	4f 93       	push	r20
    2652:	5f 93       	push	r21
    2654:	6f 93       	push	r22
    2656:	7f 93       	push	r23
    2658:	8f 93       	push	r24
    265a:	9f 93       	push	r25
    265c:	af 93       	push	r26
    265e:	bf 93       	push	r27
    2660:	ef 93       	push	r30
    2662:	ff 93       	push	r31
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
	(*timer1B_callback_ptr)();
    266c:	e0 91 73 00 	lds	r30, 0x0073
    2670:	f0 91 74 00 	lds	r31, 0x0074
    2674:	09 95       	icall
}
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	ff 91       	pop	r31
    267c:	ef 91       	pop	r30
    267e:	bf 91       	pop	r27
    2680:	af 91       	pop	r26
    2682:	9f 91       	pop	r25
    2684:	8f 91       	pop	r24
    2686:	7f 91       	pop	r23
    2688:	6f 91       	pop	r22
    268a:	5f 91       	pop	r21
    268c:	4f 91       	pop	r20
    268e:	3f 91       	pop	r19
    2690:	2f 91       	pop	r18
    2692:	0f 90       	pop	r0
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	0f 90       	pop	r0
    2698:	1f 90       	pop	r1
    269a:	18 95       	reti

0000269c <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    269c:	1f 92       	push	r1
    269e:	0f 92       	push	r0
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	0f 92       	push	r0
    26a4:	11 24       	eor	r1, r1
    26a6:	2f 93       	push	r18
    26a8:	3f 93       	push	r19
    26aa:	4f 93       	push	r20
    26ac:	5f 93       	push	r21
    26ae:	6f 93       	push	r22
    26b0:	7f 93       	push	r23
    26b2:	8f 93       	push	r24
    26b4:	9f 93       	push	r25
    26b6:	af 93       	push	r26
    26b8:	bf 93       	push	r27
    26ba:	ef 93       	push	r30
    26bc:	ff 93       	push	r31
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
	timer2_callback_ptr();
    26c6:	e0 91 75 00 	lds	r30, 0x0075
    26ca:	f0 91 76 00 	lds	r31, 0x0076
    26ce:	09 95       	icall
}
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	ff 91       	pop	r31
    26d6:	ef 91       	pop	r30
    26d8:	bf 91       	pop	r27
    26da:	af 91       	pop	r26
    26dc:	9f 91       	pop	r25
    26de:	8f 91       	pop	r24
    26e0:	7f 91       	pop	r23
    26e2:	6f 91       	pop	r22
    26e4:	5f 91       	pop	r21
    26e6:	4f 91       	pop	r20
    26e8:	3f 91       	pop	r19
    26ea:	2f 91       	pop	r18
    26ec:	0f 90       	pop	r0
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	0f 90       	pop	r0
    26f2:	1f 90       	pop	r1
    26f4:	18 95       	reti

000026f6 <Timer0_setCallPack>:
/*******************************************************************************
 *                 Set Callback Functions Definitions                          *
 *******************************************************************************/
void Timer0_setCallPack(void (*ptr)(void)){
    26f6:	df 93       	push	r29
    26f8:	cf 93       	push	r28
    26fa:	00 d0       	rcall	.+0      	; 0x26fc <Timer0_setCallPack+0x6>
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	9a 83       	std	Y+2, r25	; 0x02
    2702:	89 83       	std	Y+1, r24	; 0x01
	timer0_callback_ptr = ptr;
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	9a 81       	ldd	r25, Y+2	; 0x02
    2708:	90 93 70 00 	sts	0x0070, r25
    270c:	80 93 6f 00 	sts	0x006F, r24
}
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	cf 91       	pop	r28
    2716:	df 91       	pop	r29
    2718:	08 95       	ret

0000271a <Timer1_OVF_setCallPack>:
void Timer1_OVF_setCallPack(void (*ptr)(void)){
    271a:	df 93       	push	r29
    271c:	cf 93       	push	r28
    271e:	00 d0       	rcall	.+0      	; 0x2720 <Timer1_OVF_setCallPack+0x6>
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	9a 83       	std	Y+2, r25	; 0x02
    2726:	89 83       	std	Y+1, r24	; 0x01
	timer1A_callback_ptr = ptr;
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	9a 81       	ldd	r25, Y+2	; 0x02
    272c:	90 93 72 00 	sts	0x0072, r25
    2730:	80 93 71 00 	sts	0x0071, r24
}
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	cf 91       	pop	r28
    273a:	df 91       	pop	r29
    273c:	08 95       	ret

0000273e <Timer1_A_setCallPack>:
void Timer1_A_setCallPack(void (*ptr)(void)){
    273e:	df 93       	push	r29
    2740:	cf 93       	push	r28
    2742:	00 d0       	rcall	.+0      	; 0x2744 <Timer1_A_setCallPack+0x6>
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    2748:	9a 83       	std	Y+2, r25	; 0x02
    274a:	89 83       	std	Y+1, r24	; 0x01
	timer1A_callback_ptr = ptr;
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	9a 81       	ldd	r25, Y+2	; 0x02
    2750:	90 93 72 00 	sts	0x0072, r25
    2754:	80 93 71 00 	sts	0x0071, r24
}
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <Timer1_B_setCallPack>:
void Timer1_B_setCallPack(void (*ptr)(void)){
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	00 d0       	rcall	.+0      	; 0x2768 <Timer1_B_setCallPack+0x6>
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	9a 83       	std	Y+2, r25	; 0x02
    276e:	89 83       	std	Y+1, r24	; 0x01
	timer1B_callback_ptr = ptr;
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	9a 81       	ldd	r25, Y+2	; 0x02
    2774:	90 93 74 00 	sts	0x0074, r25
    2778:	80 93 73 00 	sts	0x0073, r24
}
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <Timer2_setCallPack>:
void Timer2_setCallPack(void (*ptr)(void)){
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	00 d0       	rcall	.+0      	; 0x278c <Timer2_setCallPack+0x6>
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	9a 83       	std	Y+2, r25	; 0x02
    2792:	89 83       	std	Y+1, r24	; 0x01
	timer2_callback_ptr = ptr;
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	9a 81       	ldd	r25, Y+2	; 0x02
    2798:	90 93 76 00 	sts	0x0076, r25
    279c:	80 93 75 00 	sts	0x0075, r24
}
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <Timer1_delay_sec>:


void Timer1_delay_sec() /* count 1 sec*/
{
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
	TCNT1 =0 ;
    27b2:	ec e4       	ldi	r30, 0x4C	; 76
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	11 82       	std	Z+1, r1	; 0x01
    27b8:	10 82       	st	Z, r1
	OCR1A = 7812 ;            //capture value
    27ba:	ea e4       	ldi	r30, 0x4A	; 74
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	84 e8       	ldi	r24, 0x84	; 132
    27c0:	9e e1       	ldi	r25, 0x1E	; 30
    27c2:	91 83       	std	Z+1, r25	; 0x01
    27c4:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); // Compare mode
    27c6:	ae e4       	ldi	r26, 0x4E	; 78
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	ee e4       	ldi	r30, 0x4E	; 78
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	88 60       	ori	r24, 0x08	; 8
    27d2:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xf8)| (clock1024);
    27d4:	ae e4       	ldi	r26, 0x4E	; 78
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	ee e4       	ldi	r30, 0x4E	; 78
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	88 7f       	andi	r24, 0xF8	; 248
    27e0:	85 60       	ori	r24, 0x05	; 5
    27e2:	8c 93       	st	X, r24
	TCCR1A|=(1<<FOC1A) ;  //not PMW
    27e4:	af e4       	ldi	r26, 0x4F	; 79
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	ef e4       	ldi	r30, 0x4F	; 79
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	88 60       	ori	r24, 0x08	; 8
    27f0:	8c 93       	st	X, r24
	while(!(TIFR & (1<<OCF1A))); // Wait until the Timer0 Overflow occurs (wait until TOV0 = 1)
    27f2:	e8 e5       	ldi	r30, 0x58	; 88
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	88 2f       	mov	r24, r24
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	80 71       	andi	r24, 0x10	; 16
    27fe:	90 70       	andi	r25, 0x00	; 0
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	b9 f3       	breq	.-18     	; 0x27f2 <Timer1_delay_sec+0x48>
	TCCR1B = 0;
    2804:	ee e4       	ldi	r30, 0x4E	; 78
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	10 82       	st	Z, r1
	TIFR |= (1<<OCF1A); // Clear TOV0 bit by set its value
    280a:	a8 e5       	ldi	r26, 0x58	; 88
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	e8 e5       	ldi	r30, 0x58	; 88
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	80 61       	ori	r24, 0x10	; 16
    2816:	8c 93       	st	X, r24

}
    2818:	cf 91       	pop	r28
    281a:	df 91       	pop	r29
    281c:	08 95       	ret

0000281e <Timer1_delay_10msec>:
void Timer1_delay_10msec() /* count 10 msec*/
{
    281e:	df 93       	push	r29
    2820:	cf 93       	push	r28
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
	TCNT1 =0 ;
    2826:	ec e4       	ldi	r30, 0x4C	; 76
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	11 82       	std	Z+1, r1	; 0x01
    282c:	10 82       	st	Z, r1
	OCR1A = 312 ;            //capture value
    282e:	ea e4       	ldi	r30, 0x4A	; 74
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	88 e3       	ldi	r24, 0x38	; 56
    2834:	91 e0       	ldi	r25, 0x01	; 1
    2836:	91 83       	std	Z+1, r25	; 0x01
    2838:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12); // Compare mode
    283a:	ae e4       	ldi	r26, 0x4E	; 78
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	ee e4       	ldi	r30, 0x4E	; 78
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	88 60       	ori	r24, 0x08	; 8
    2846:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xf8)| (clock256);
    2848:	ae e4       	ldi	r26, 0x4E	; 78
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	ee e4       	ldi	r30, 0x4E	; 78
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	88 7f       	andi	r24, 0xF8	; 248
    2854:	84 60       	ori	r24, 0x04	; 4
    2856:	8c 93       	st	X, r24
	TCCR1A|=(1<<FOC1A) ;  //not PMW
    2858:	af e4       	ldi	r26, 0x4F	; 79
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	ef e4       	ldi	r30, 0x4F	; 79
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	88 60       	ori	r24, 0x08	; 8
    2864:	8c 93       	st	X, r24
	while(!(TIFR & (1<<OCF1A))); // Wait until the Timer0 Overflow occurs (wait until TOV0 = 1)
    2866:	e8 e5       	ldi	r30, 0x58	; 88
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	88 2f       	mov	r24, r24
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	80 71       	andi	r24, 0x10	; 16
    2872:	90 70       	andi	r25, 0x00	; 0
    2874:	00 97       	sbiw	r24, 0x00	; 0
    2876:	b9 f3       	breq	.-18     	; 0x2866 <Timer1_delay_10msec+0x48>
	TCCR1B = 0;
    2878:	ee e4       	ldi	r30, 0x4E	; 78
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	10 82       	st	Z, r1
	TIFR |= (1<<OCF1A); // Clear TOV0 bit by set its value
    287e:	a8 e5       	ldi	r26, 0x58	; 88
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	e8 e5       	ldi	r30, 0x58	; 88
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	80 61       	ori	r24, 0x10	; 16
    288a:	8c 93       	st	X, r24

}
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <Timer0_Deinit_Mode>:




void Timer0_Deinit_Mode(){
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    289a:	e3 e5       	ldi	r30, 0x53	; 83
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	10 82       	st	Z, r1
}
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <Timer1_Deinit_Mode>:
void Timer1_Deinit_Mode(){
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0;
    28ae:	ee e4       	ldi	r30, 0x4E	; 78
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	10 82       	st	Z, r1
	TCCR1A=0;
    28b4:	ef e4       	ldi	r30, 0x4F	; 79
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	10 82       	st	Z, r1
}
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	08 95       	ret

000028c0 <Timer2_Deinit_Mode>:
void Timer2_Deinit_Mode(){
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0;
    28c8:	e5 e4       	ldi	r30, 0x45	; 69
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	10 82       	st	Z, r1
}
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	08 95       	ret

000028d4 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    28dc:	e0 e2       	ldi	r30, 0x20	; 32
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	82 e0       	ldi	r24, 0x02	; 2
    28e2:	80 83       	st	Z, r24
	TWSR = 0x00;
    28e4:	e1 e2       	ldi	r30, 0x21	; 33
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    28ea:	e2 e2       	ldi	r30, 0x22	; 34
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	82 e0       	ldi	r24, 0x02	; 2
    28f0:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    28f2:	e6 e5       	ldi	r30, 0x56	; 86
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	84 e0       	ldi	r24, 0x04	; 4
    28f8:	80 83       	st	Z, r24
}
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	08 95       	ret

00002900 <TWI_start>:

void TWI_start(void)
{
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2908:	e6 e5       	ldi	r30, 0x56	; 86
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	84 ea       	ldi	r24, 0xA4	; 164
    290e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2910:	e6 e5       	ldi	r30, 0x56	; 86
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	88 23       	and	r24, r24
    2918:	dc f7       	brge	.-10     	; 0x2910 <TWI_start+0x10>
}
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <TWI_stop>:

void TWI_stop(void)
{
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2928:	e6 e5       	ldi	r30, 0x56	; 86
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	84 e9       	ldi	r24, 0x94	; 148
    292e:	80 83       	st	Z, r24
}
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	0f 92       	push	r0
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2942:	e3 e2       	ldi	r30, 0x23	; 35
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    294a:	e6 e5       	ldi	r30, 0x56	; 86
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	84 e8       	ldi	r24, 0x84	; 132
    2950:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2952:	e6 e5       	ldi	r30, 0x56	; 86
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	88 23       	and	r24, r24
    295a:	dc f7       	brge	.-10     	; 0x2952 <TWI_writeByte+0x1c>
}
    295c:	0f 90       	pop	r0
    295e:	cf 91       	pop	r28
    2960:	df 91       	pop	r29
    2962:	08 95       	ret

00002964 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    296c:	e6 e5       	ldi	r30, 0x56	; 86
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	84 ec       	ldi	r24, 0xC4	; 196
    2972:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2974:	e6 e5       	ldi	r30, 0x56	; 86
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	88 23       	and	r24, r24
    297c:	dc f7       	brge	.-10     	; 0x2974 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    297e:	e3 e2       	ldi	r30, 0x23	; 35
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
}
    2984:	cf 91       	pop	r28
    2986:	df 91       	pop	r29
    2988:	08 95       	ret

0000298a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    298a:	df 93       	push	r29
    298c:	cf 93       	push	r28
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2992:	e6 e5       	ldi	r30, 0x56	; 86
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	84 e8       	ldi	r24, 0x84	; 132
    2998:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    299a:	e6 e5       	ldi	r30, 0x56	; 86
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	88 23       	and	r24, r24
    29a2:	dc f7       	brge	.-10     	; 0x299a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    29a4:	e3 e2       	ldi	r30, 0x23	; 35
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
}
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	0f 92       	push	r0
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    29ba:	e1 e2       	ldi	r30, 0x21	; 33
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	88 7f       	andi	r24, 0xF8	; 248
    29c2:	89 83       	std	Y+1, r24	; 0x01
    return status;
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    29c6:	0f 90       	pop	r0
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	00 d0       	rcall	.+0      	; 0x29d4 <UART_init+0x6>
    29d4:	00 d0       	rcall	.+0      	; 0x29d6 <UART_init+0x8>
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
    29da:	9c 83       	std	Y+4, r25	; 0x04
    29dc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    29de:	1a 82       	std	Y+2, r1	; 0x02
    29e0:	19 82       	std	Y+1, r1	; 0x01
	/*set USART mode Asynch. or Synch.*/
	UCSRC= UCSRC | (Config_Ptr->mode  << 6);
    29e2:	a0 e4       	ldi	r26, 0x40	; 64
    29e4:	b0 e0       	ldi	r27, 0x00	; 0
    29e6:	e0 e4       	ldi	r30, 0x40	; 64
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
    29ec:	28 2f       	mov	r18, r24
    29ee:	eb 81       	ldd	r30, Y+3	; 0x03
    29f0:	fc 81       	ldd	r31, Y+4	; 0x04
    29f2:	80 81       	ld	r24, Z
    29f4:	88 2f       	mov	r24, r24
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	00 24       	eor	r0, r0
    29fa:	96 95       	lsr	r25
    29fc:	87 95       	ror	r24
    29fe:	07 94       	ror	r0
    2a00:	96 95       	lsr	r25
    2a02:	87 95       	ror	r24
    2a04:	07 94       	ror	r0
    2a06:	98 2f       	mov	r25, r24
    2a08:	80 2d       	mov	r24, r0
    2a0a:	82 2b       	or	r24, r18
    2a0c:	8c 93       	st	X, r24

	/* U2X = 1 for double transmission speed */

	UCSRA = (1<<U2X);
    2a0e:	eb e2       	ldi	r30, 0x2B	; 43
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	82 e0       	ldi	r24, 0x02	; 2
    2a14:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2a16:	ea e2       	ldi	r30, 0x2A	; 42
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	88 e1       	ldi	r24, 0x18	; 24
    2a1c:	80 83       	st	Z, r24
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	

	/*set no. of bits in frame and parity bit type and no. of stop bit */
	UCSRC =(1<<URSEL) | (Config_Ptr->numberOfStopBits <<3) | (Config_Ptr->parityType <<4) |(Config_Ptr->numberOfBitsPerFrame <<1);
    2a1e:	a0 e4       	ldi	r26, 0x40	; 64
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	eb 81       	ldd	r30, Y+3	; 0x03
    2a24:	fc 81       	ldd	r31, Y+4	; 0x04
    2a26:	84 81       	ldd	r24, Z+4	; 0x04
    2a28:	88 2f       	mov	r24, r24
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	88 0f       	add	r24, r24
    2a2e:	99 1f       	adc	r25, r25
    2a30:	88 0f       	add	r24, r24
    2a32:	99 1f       	adc	r25, r25
    2a34:	88 0f       	add	r24, r24
    2a36:	99 1f       	adc	r25, r25
    2a38:	28 2f       	mov	r18, r24
    2a3a:	20 68       	ori	r18, 0x80	; 128
    2a3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a40:	81 81       	ldd	r24, Z+1	; 0x01
    2a42:	88 2f       	mov	r24, r24
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	82 95       	swap	r24
    2a48:	92 95       	swap	r25
    2a4a:	90 7f       	andi	r25, 0xF0	; 240
    2a4c:	98 27       	eor	r25, r24
    2a4e:	80 7f       	andi	r24, 0xF0	; 240
    2a50:	98 27       	eor	r25, r24
    2a52:	28 2b       	or	r18, r24
    2a54:	eb 81       	ldd	r30, Y+3	; 0x03
    2a56:	fc 81       	ldd	r31, Y+4	; 0x04
    2a58:	85 81       	ldd	r24, Z+5	; 0x05
    2a5a:	88 2f       	mov	r24, r24
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	88 0f       	add	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	82 2b       	or	r24, r18
    2a64:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baudRate * 8UL))) - 1);
    2a66:	eb 81       	ldd	r30, Y+3	; 0x03
    2a68:	fc 81       	ldd	r31, Y+4	; 0x04
    2a6a:	82 81       	ldd	r24, Z+2	; 0x02
    2a6c:	93 81       	ldd	r25, Z+3	; 0x03
    2a6e:	cc 01       	movw	r24, r24
    2a70:	a0 e0       	ldi	r26, 0x00	; 0
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	88 0f       	add	r24, r24
    2a76:	99 1f       	adc	r25, r25
    2a78:	aa 1f       	adc	r26, r26
    2a7a:	bb 1f       	adc	r27, r27
    2a7c:	88 0f       	add	r24, r24
    2a7e:	99 1f       	adc	r25, r25
    2a80:	aa 1f       	adc	r26, r26
    2a82:	bb 1f       	adc	r27, r27
    2a84:	88 0f       	add	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	aa 1f       	adc	r26, r26
    2a8a:	bb 1f       	adc	r27, r27
    2a8c:	9c 01       	movw	r18, r24
    2a8e:	ad 01       	movw	r20, r26
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	92 e1       	ldi	r25, 0x12	; 18
    2a94:	aa e7       	ldi	r26, 0x7A	; 122
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	bc 01       	movw	r22, r24
    2a9a:	cd 01       	movw	r24, r26
    2a9c:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <__udivmodsi4>
    2aa0:	da 01       	movw	r26, r20
    2aa2:	c9 01       	movw	r24, r18
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	9a 83       	std	Y+2, r25	; 0x02
    2aa8:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2aaa:	e0 e4       	ldi	r30, 0x40	; 64
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab2:	89 2f       	mov	r24, r25
    2ab4:	99 27       	eor	r25, r25
    2ab6:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2ab8:	e9 e2       	ldi	r30, 0x29	; 41
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
    2abe:	80 83       	st	Z, r24
}
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	08 95       	ret

00002ace <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	0f 92       	push	r0
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
    2ad8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2ada:	eb e2       	ldi	r30, 0x2B	; 43
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	88 2f       	mov	r24, r24
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	80 72       	andi	r24, 0x20	; 32
    2ae6:	90 70       	andi	r25, 0x00	; 0
    2ae8:	00 97       	sbiw	r24, 0x00	; 0
    2aea:	b9 f3       	breq	.-18     	; 0x2ada <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2aec:	ec e2       	ldi	r30, 0x2C	; 44
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2af4:	0f 90       	pop	r0
    2af6:	cf 91       	pop	r28
    2af8:	df 91       	pop	r29
    2afa:	08 95       	ret

00002afc <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2afc:	df 93       	push	r29
    2afe:	cf 93       	push	r28
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2b04:	eb e2       	ldi	r30, 0x2B	; 43
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	88 23       	and	r24, r24
    2b0c:	dc f7       	brge	.-10     	; 0x2b04 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2b0e:	ec e2       	ldi	r30, 0x2C	; 44
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
}
    2b14:	cf 91       	pop	r28
    2b16:	df 91       	pop	r29
    2b18:	08 95       	ret

00002b1a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2b1a:	df 93       	push	r29
    2b1c:	cf 93       	push	r28
    2b1e:	00 d0       	rcall	.+0      	; 0x2b20 <UART_sendString+0x6>
    2b20:	0f 92       	push	r0
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	9b 83       	std	Y+3, r25	; 0x03
    2b28:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b2a:	19 82       	std	Y+1, r1	; 0x01
    2b2c:	0e c0       	rjmp	.+28     	; 0x2b4a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	28 2f       	mov	r18, r24
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	8a 81       	ldd	r24, Y+2	; 0x02
    2b36:	9b 81       	ldd	r25, Y+3	; 0x03
    2b38:	fc 01       	movw	r30, r24
    2b3a:	e2 0f       	add	r30, r18
    2b3c:	f3 1f       	adc	r31, r19
    2b3e:	80 81       	ld	r24, Z
    2b40:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>
		i++;
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	8f 5f       	subi	r24, 0xFF	; 255
    2b48:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	28 2f       	mov	r18, r24
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	8a 81       	ldd	r24, Y+2	; 0x02
    2b52:	9b 81       	ldd	r25, Y+3	; 0x03
    2b54:	fc 01       	movw	r30, r24
    2b56:	e2 0f       	add	r30, r18
    2b58:	f3 1f       	adc	r31, r19
    2b5a:	80 81       	ld	r24, Z
    2b5c:	88 23       	and	r24, r24
    2b5e:	39 f7       	brne	.-50     	; 0x2b2e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	08 95       	ret

00002b6c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2b6c:	0f 93       	push	r16
    2b6e:	1f 93       	push	r17
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	00 d0       	rcall	.+0      	; 0x2b76 <UART_receiveString+0xa>
    2b76:	0f 92       	push	r0
    2b78:	cd b7       	in	r28, 0x3d	; 61
    2b7a:	de b7       	in	r29, 0x3e	; 62
    2b7c:	9b 83       	std	Y+3, r25	; 0x03
    2b7e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b80:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	28 2f       	mov	r18, r24
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b8c:	8c 01       	movw	r16, r24
    2b8e:	02 0f       	add	r16, r18
    2b90:	13 1f       	adc	r17, r19
    2b92:	0e 94 7e 15 	call	0x2afc	; 0x2afc <UART_recieveByte>
    2b96:	f8 01       	movw	r30, r16
    2b98:	80 83       	st	Z, r24
    2b9a:	0f c0       	rjmp	.+30     	; 0x2bba <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ba0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	28 2f       	mov	r18, r24
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    2baa:	9b 81       	ldd	r25, Y+3	; 0x03
    2bac:	8c 01       	movw	r16, r24
    2bae:	02 0f       	add	r16, r18
    2bb0:	13 1f       	adc	r17, r19
    2bb2:	0e 94 7e 15 	call	0x2afc	; 0x2afc <UART_recieveByte>
    2bb6:	f8 01       	movw	r30, r16
    2bb8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	28 2f       	mov	r18, r24
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	e2 0f       	add	r30, r18
    2bc8:	f3 1f       	adc	r31, r19
    2bca:	80 81       	ld	r24, Z
    2bcc:	83 32       	cpi	r24, 0x23	; 35
    2bce:	31 f7       	brne	.-52     	; 0x2b9c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2bd0:	89 81       	ldd	r24, Y+1	; 0x01
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bda:	fc 01       	movw	r30, r24
    2bdc:	e2 0f       	add	r30, r18
    2bde:	f3 1f       	adc	r31, r19
    2be0:	10 82       	st	Z, r1
}
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	cf 91       	pop	r28
    2bea:	df 91       	pop	r29
    2bec:	1f 91       	pop	r17
    2bee:	0f 91       	pop	r16
    2bf0:	08 95       	ret

00002bf2 <__udivmodsi4>:
    2bf2:	a1 e2       	ldi	r26, 0x21	; 33
    2bf4:	1a 2e       	mov	r1, r26
    2bf6:	aa 1b       	sub	r26, r26
    2bf8:	bb 1b       	sub	r27, r27
    2bfa:	fd 01       	movw	r30, r26
    2bfc:	0d c0       	rjmp	.+26     	; 0x2c18 <__udivmodsi4_ep>

00002bfe <__udivmodsi4_loop>:
    2bfe:	aa 1f       	adc	r26, r26
    2c00:	bb 1f       	adc	r27, r27
    2c02:	ee 1f       	adc	r30, r30
    2c04:	ff 1f       	adc	r31, r31
    2c06:	a2 17       	cp	r26, r18
    2c08:	b3 07       	cpc	r27, r19
    2c0a:	e4 07       	cpc	r30, r20
    2c0c:	f5 07       	cpc	r31, r21
    2c0e:	20 f0       	brcs	.+8      	; 0x2c18 <__udivmodsi4_ep>
    2c10:	a2 1b       	sub	r26, r18
    2c12:	b3 0b       	sbc	r27, r19
    2c14:	e4 0b       	sbc	r30, r20
    2c16:	f5 0b       	sbc	r31, r21

00002c18 <__udivmodsi4_ep>:
    2c18:	66 1f       	adc	r22, r22
    2c1a:	77 1f       	adc	r23, r23
    2c1c:	88 1f       	adc	r24, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	1a 94       	dec	r1
    2c22:	69 f7       	brne	.-38     	; 0x2bfe <__udivmodsi4_loop>
    2c24:	60 95       	com	r22
    2c26:	70 95       	com	r23
    2c28:	80 95       	com	r24
    2c2a:	90 95       	com	r25
    2c2c:	9b 01       	movw	r18, r22
    2c2e:	ac 01       	movw	r20, r24
    2c30:	bd 01       	movw	r22, r26
    2c32:	cf 01       	movw	r24, r30
    2c34:	08 95       	ret

00002c36 <__prologue_saves__>:
    2c36:	2f 92       	push	r2
    2c38:	3f 92       	push	r3
    2c3a:	4f 92       	push	r4
    2c3c:	5f 92       	push	r5
    2c3e:	6f 92       	push	r6
    2c40:	7f 92       	push	r7
    2c42:	8f 92       	push	r8
    2c44:	9f 92       	push	r9
    2c46:	af 92       	push	r10
    2c48:	bf 92       	push	r11
    2c4a:	cf 92       	push	r12
    2c4c:	df 92       	push	r13
    2c4e:	ef 92       	push	r14
    2c50:	ff 92       	push	r15
    2c52:	0f 93       	push	r16
    2c54:	1f 93       	push	r17
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	ca 1b       	sub	r28, r26
    2c60:	db 0b       	sbc	r29, r27
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	f8 94       	cli
    2c66:	de bf       	out	0x3e, r29	; 62
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	cd bf       	out	0x3d, r28	; 61
    2c6c:	09 94       	ijmp

00002c6e <__epilogue_restores__>:
    2c6e:	2a 88       	ldd	r2, Y+18	; 0x12
    2c70:	39 88       	ldd	r3, Y+17	; 0x11
    2c72:	48 88       	ldd	r4, Y+16	; 0x10
    2c74:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c76:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c78:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c80:	b9 84       	ldd	r11, Y+9	; 0x09
    2c82:	c8 84       	ldd	r12, Y+8	; 0x08
    2c84:	df 80       	ldd	r13, Y+7	; 0x07
    2c86:	ee 80       	ldd	r14, Y+6	; 0x06
    2c88:	fd 80       	ldd	r15, Y+5	; 0x05
    2c8a:	0c 81       	ldd	r16, Y+4	; 0x04
    2c8c:	1b 81       	ldd	r17, Y+3	; 0x03
    2c8e:	aa 81       	ldd	r26, Y+2	; 0x02
    2c90:	b9 81       	ldd	r27, Y+1	; 0x01
    2c92:	ce 0f       	add	r28, r30
    2c94:	d1 1d       	adc	r29, r1
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	f8 94       	cli
    2c9a:	de bf       	out	0x3e, r29	; 62
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	cd bf       	out	0x3d, r28	; 61
    2ca0:	ed 01       	movw	r28, r26
    2ca2:	08 95       	ret

00002ca4 <strcmp>:
    2ca4:	fb 01       	movw	r30, r22
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	8d 91       	ld	r24, X+
    2caa:	01 90       	ld	r0, Z+
    2cac:	80 19       	sub	r24, r0
    2cae:	01 10       	cpse	r0, r1
    2cb0:	d9 f3       	breq	.-10     	; 0x2ca8 <strcmp+0x4>
    2cb2:	99 0b       	sbc	r25, r25
    2cb4:	08 95       	ret

00002cb6 <strcpy>:
    2cb6:	fb 01       	movw	r30, r22
    2cb8:	dc 01       	movw	r26, r24
    2cba:	01 90       	ld	r0, Z+
    2cbc:	0d 92       	st	X+, r0
    2cbe:	00 20       	and	r0, r0
    2cc0:	e1 f7       	brne	.-8      	; 0x2cba <strcpy+0x4>
    2cc2:	08 95       	ret

00002cc4 <itoa>:
    2cc4:	fb 01       	movw	r30, r22
    2cc6:	9f 01       	movw	r18, r30
    2cc8:	e8 94       	clt
    2cca:	42 30       	cpi	r20, 0x02	; 2
    2ccc:	c4 f0       	brlt	.+48     	; 0x2cfe <itoa+0x3a>
    2cce:	45 32       	cpi	r20, 0x25	; 37
    2cd0:	b4 f4       	brge	.+44     	; 0x2cfe <itoa+0x3a>
    2cd2:	4a 30       	cpi	r20, 0x0A	; 10
    2cd4:	29 f4       	brne	.+10     	; 0x2ce0 <itoa+0x1c>
    2cd6:	97 fb       	bst	r25, 7
    2cd8:	1e f4       	brtc	.+6      	; 0x2ce0 <itoa+0x1c>
    2cda:	90 95       	com	r25
    2cdc:	81 95       	neg	r24
    2cde:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce0:	64 2f       	mov	r22, r20
    2ce2:	77 27       	eor	r23, r23
    2ce4:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__udivmodhi4>
    2ce8:	80 5d       	subi	r24, 0xD0	; 208
    2cea:	8a 33       	cpi	r24, 0x3A	; 58
    2cec:	0c f0       	brlt	.+2      	; 0x2cf0 <itoa+0x2c>
    2cee:	89 5d       	subi	r24, 0xD9	; 217
    2cf0:	81 93       	st	Z+, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	00 97       	sbiw	r24, 0x00	; 0
    2cf6:	a1 f7       	brne	.-24     	; 0x2ce0 <itoa+0x1c>
    2cf8:	16 f4       	brtc	.+4      	; 0x2cfe <itoa+0x3a>
    2cfa:	5d e2       	ldi	r21, 0x2D	; 45
    2cfc:	51 93       	st	Z+, r21
    2cfe:	10 82       	st	Z, r1
    2d00:	c9 01       	movw	r24, r18
    2d02:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <strrev>

00002d06 <strrev>:
    2d06:	dc 01       	movw	r26, r24
    2d08:	fc 01       	movw	r30, r24
    2d0a:	67 2f       	mov	r22, r23
    2d0c:	71 91       	ld	r23, Z+
    2d0e:	77 23       	and	r23, r23
    2d10:	e1 f7       	brne	.-8      	; 0x2d0a <strrev+0x4>
    2d12:	32 97       	sbiw	r30, 0x02	; 2
    2d14:	04 c0       	rjmp	.+8      	; 0x2d1e <strrev+0x18>
    2d16:	7c 91       	ld	r23, X
    2d18:	6d 93       	st	X+, r22
    2d1a:	70 83       	st	Z, r23
    2d1c:	62 91       	ld	r22, -Z
    2d1e:	ae 17       	cp	r26, r30
    2d20:	bf 07       	cpc	r27, r31
    2d22:	c8 f3       	brcs	.-14     	; 0x2d16 <strrev+0x10>
    2d24:	08 95       	ret

00002d26 <__udivmodhi4>:
    2d26:	aa 1b       	sub	r26, r26
    2d28:	bb 1b       	sub	r27, r27
    2d2a:	51 e1       	ldi	r21, 0x11	; 17
    2d2c:	07 c0       	rjmp	.+14     	; 0x2d3c <__udivmodhi4_ep>

00002d2e <__udivmodhi4_loop>:
    2d2e:	aa 1f       	adc	r26, r26
    2d30:	bb 1f       	adc	r27, r27
    2d32:	a6 17       	cp	r26, r22
    2d34:	b7 07       	cpc	r27, r23
    2d36:	10 f0       	brcs	.+4      	; 0x2d3c <__udivmodhi4_ep>
    2d38:	a6 1b       	sub	r26, r22
    2d3a:	b7 0b       	sbc	r27, r23

00002d3c <__udivmodhi4_ep>:
    2d3c:	88 1f       	adc	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	5a 95       	dec	r21
    2d42:	a9 f7       	brne	.-22     	; 0x2d2e <__udivmodhi4_loop>
    2d44:	80 95       	com	r24
    2d46:	90 95       	com	r25
    2d48:	bc 01       	movw	r22, r24
    2d4a:	cd 01       	movw	r24, r26
    2d4c:	08 95       	ret

00002d4e <_exit>:
    2d4e:	f8 94       	cli

00002d50 <__stop_program>:
    2d50:	ff cf       	rjmp	.-2      	; 0x2d50 <__stop_program>
